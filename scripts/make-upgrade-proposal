#!/usr/bin/env bash
set -euo pipefail

# THIS SCRIPT IS A WORK IN PROGRESS
# 
# It is based on the NNS Dapp `release-sop` script:
# https://github.com/dfinity/nns-dapp/blob/main/scripts/nns-dapp/release-sop
# 

SOURCE_DIR="$(dirname "${BASH_SOURCE[0]}")"

print_help() {
  cat <<-EOF

	Performs or guides the steps in the Internet Identity release SOP checklist.

	To start a new release process, run:
	  ./make-upgrade-proposal.sh --new --name release-\$(date +%Y-%m-%d)

	To start a new release process on the same day as a previous release, run:
	  ./make-upgrade-proposal.sh --new --name release-\$(date +%Y-%m-%d)-v2

	To continue an existing release process, run:
	  ./make-upgrade-proposal.sh --continue --name <release-used-on-new>

	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define long=new desc="Start a new release branch" variable=IS_NEW_RELEASE nargs=0 default="false"
clap.define long=continue desc="Continue with an existing release branch" variable=CONTINUE nargs=0 default="false"
clap.define long=name desc="The name of the new release branch" variable=TAG_NAME
# Source the output file ------------------------------------------------------
source "$(clap.build)"

if [ "$IS_NEW_RELEASE" = "true" ] && [ "$CONTINUE" = "true" ]; then
  echo "Cannot specify both --new and --continue" >&2
  exit 1
fi

if [ "$IS_NEW_RELEASE" = "false" ] && [ "$CONTINUE" = "false" ]; then
  echo "Must specify either --new or --continue" >&2
  exit 1
fi

NOT_MOCKED_COMMANDS=(
  echo
  printf
  wait_for_release_text_change
  wait_for_archive_canister_hash
  download_wasms
  request_verification_command
  deploy_release_candidate
  test_release_candidate
  download_proposal_text
  prepare_proposal_argument
  append_proposal_argument
  confirm_proposal_arguments
)

execute() {
  if ! [ "${MOCK_JSON:-}" ]; then
    "$@"
    return
  fi
  for not_mocked in "${NOT_MOCKED_COMMANDS[@]}"; do
    if [ "$1" = "$not_mocked" ]; then
      "$@"
      return
    fi
  done
  cmd=$(printf "%q " "$@" | sed 's/ $//')
  entry="$(jq --arg command "$cmd" '.behavior[] | select(.command == $command)' "$MOCK_JSON")"
  if ! [ "$entry" ]; then
    echo "No mock behavior for: $cmd" >&2
    exit 1
  fi
  stdout="$(echo "$entry" | jq -r .stdout)"
  stderr="$(echo "$entry" | jq -r .stderr)"
  echo -n "$stdout"
  echo -n "$stderr" >&2
  exitCode="$(echo "$entry" | jq -r .exitCode)"
  return "$exitCode"
}

RELEASE_NAME_PATTERN="^release-[0-9]{4}-[0-9]{2}-[0-9]{2}"

if [ -z "${TAG_NAME+x}" ]; then
  echo "Must specify TAG_NAME"
  echo ""
  echo "Make sure to checkout the latest main branch,"
  echo "and then create a git release tag: release-yyyy-mm-dd"
  echo ""
  echo "Then use the following command to start: TAG_NAME=release-yyyy-mm-dd ./scripts/make_upgrade_proposal --new"
  exit 1;
fi

if [ "$IS_NEW_RELEASE" = "true" ]; then
  CHECKLIST_FILE="${SOURCE_DIR}/${TAG_NAME}.json"

  echo "[]" >"$CHECKLIST_FILE"
else

  CHECKLIST_FILE="${SOURCE_DIR}/${TAG_NAME}.json"

  if [ ! -f "$CHECKLIST_FILE" ]; then
    echo "Error: Checklist '$CHECKLIST_FILE' not found!" >&2
    exit 1
fi
fi

TOP_DIR=$(execute git rev-parse --show-toplevel)
execute cd "$TOP_DIR"

GREEN_COLOR="\033[32m"
MAGENTA_COLOR="\033[35m"
RESET_COLOR="\033[0m"

checklist_get() {
  local name
  name="$1"
  jq -r --arg name "$name" '.[] | select(.name == $name) | .value' "$CHECKLIST_FILE"
}

checklist_add() {
  local name value temp_file
  name="$1"
  value="$2"
  temp_file="$CHECKLIST_FILE.tmp"
  jq --arg name "$name" --arg value "$value" '. + [{name: $name, value: $value}]' "$CHECKLIST_FILE" >"$temp_file"
  mv "$temp_file" "$CHECKLIST_FILE"
  echo -e "$name: ${GREEN_COLOR}$value${RESET_COLOR}"
}

# This script is designed to be run multiple times. Steps that have been
# performed are recorded in a checklist and not repeated except for
# verification steps.

# There are 3 types of steps in the checklist: confirm_cmd, record and verify.
# * confirm_cmd: Takes a command and runs it after asking for confirmation.
#   Then records "Done" in the checklist. On reruns of the script, these steps
#   are skipped. For example: Download the WASM from CI.
# * record: Takes label and a command and records the command's stdout in the
#   checklist for the given label. Output that should not be recorded should
#   go to stderr. On reruns of the script, these steps are skipped. For
#   example: Get the WASM hash from CI log.

confirm_cmd() {
  local cmd
  cmd=$(printf "%q " "$@" | sed 's/ $//')
  value="$(checklist_get "$cmd")"
  if [ "$value" ]; then
    echo "$cmd: Was already done. Skipping."
    echo ""
    return
  fi
  (
    echo
    echo "👇 Press enter to run the following command:"
    echo
    echo "$cmd"
    echo
  ) >&2
  if ! [ "${MOCK_JSON:-}" ]; then
    read -r
    if ! "$@"; then
      echo "Command failed." >&2
      exit 1
    fi
  fi
  checklist_add "$cmd" "Done"
  echo 
}

confirm_manual() {
  local label value input
  label="$1"
  shift
  value="$(checklist_get "$label")"
  if [ "$value" ]; then
    echo "$label: Was already done. Skipping."
    return
  fi
  if ! execute "$@"; then
    echo "$label: Failed"
    exit 1
  fi
  echo
  echo "When you've done that ☝️  confirm by entering 'y':"
  if ! [ "${MOCK_JSON:-}" ]; then
    read -r input
    if [[ ${input:-} != "y" ]]; then
      echo "Aborting." >&2
      exit 1
    fi
  fi
  checklist_add "$label" "Done"
  echo
}

record() {
  local label value
  label="$1"
  shift
  value="$(checklist_get "$label")"
  if [ "$value" ]; then
    echo -e "$label: Was already: ${MAGENTA_COLOR}$value${RESET_COLOR}"
    return
  fi
  if ! value="$(execute "$@")"; then
    echo "$label: Failed"
    exit 1
  fi
  checklist_add "$label" "$value"
}

checklist_must_get() {
  name="$1"
  value="$(checklist_get "$name")"
  if ! [ "$value" ]; then
    echo "'$name' not found in checklist" >&2
    exit 1
  fi
  echo "$value"
}

is_release_sop_script_newest_version() {
  if git diff --quiet origin/main scripts/upgrade-proposal; then
    echo "yes"
    return
  fi
  echo
  echo "The release-sop script is different from origin/main"
  echo "Pull changes and try again."
  exit 1
}

sha256() {
  sha256sum "$1" | awk '{print $1}'
}

wait_for_release() {
  API_URL="https://api.github.com/repos/dfinity/internet-identity/releases/tags/$TAG_NAME"

  echo "Waiting for release $TAG_NAME in repo..."

  while true; do
      RESPONSE=$(curl -s "$API_URL")

      # Check if the release exists
      if echo "$RESPONSE" | grep -q '"id":'; then
          echo "Release $TAG_NAME is available!"
          break;
      else
          echo "Release not found. Retrying in 1 minute..."
          sleep 60
      fi
  done
}

wait_for_release_text_change() {
  echo "Go to the release page"
  echo "Change title to release-YYYY-MM-DD: (Friendly and explanatory title)"
  echo "Add a paragraph after the first one summarizing the upgrade changes"
  echo "Release page: https://github.com/dfinity/internet-identity/releases/tag/$TAG_NAME"
}

wait_for_archive_canister_hash() {
  echo "Go to the release page"
  echo "Compare the hashes of archive canisters from the previous release and this one"
  echo "If they are different, we need a new canister"
  echo "Update the release page verify command: \"scripts/verify-hash\""
  echo "Release page: https://github.com/dfinity/internet-identity/releases/tag/$TAG_NAME"
}

download_wasms() {
  curl -sSL https://github.com/dfinity/internet-identity/releases/latest/download/internet_identity_production.wasm.gz -o internet_identity.wasm.gz
  curl -sSL https://github.com/dfinity/internet-identity/releases/latest/download/archive.wasm.gz -o archive.wasm.gz
}

request_verification_command() {
  II_WASM_SHA=$(sha256sum "internet_identity.wasm.gz" | awk '{print $1}')
  ARCHIVE_WASM_SHA=$(sha256sum "archive.wasm.gz" | awk '{print $1}')

  echo "Run the following command in another terminal to verify the hashes"
  echo "./scripts/verify-hash --ii-hash $II_WASM_SHA --archive-hash $ARCHIVE_WASM_SHA"
}

deploy_release_candidate() {
  echo "Deploying II release candidate with same arguments as prod"
  dfx canister --network ic --wallet cvthj-wyaaa-aaaad-aaaaq-cai install jqajs-xiaaa-aaaad-aab5q-cai --mode=upgrade --wasm ./internet_identity.wasm.gz --argument-file ./args.txt
  dfx canister --network ic --wallet cvthj-wyaaa-aaaad-aaaaq-cai install fgte5-ciaaa-aaaad-aaatq-cai --mode=upgrade --wasm ./internet_identity.wasm.gz --argument-file ./args.txt
}

test_release_candidate() {
  echo "Test release candidate"
  echo "Check that the release candidate is deployed and working"
  echo "Beta: https://beta.identity.ic0.app/"
  echo "Dummy relying party: https://l7rua-raaaa-aaaap-ahh6a-cai.icp0.io/"
  echo "Make sure to check various devices and ask others to also check"
}

confirm_proposal_arguments() {
  echo "Confirm that the sha256 of the arg.bin file matches the one in the Proposal.md file"
  echo ""
  echo "You need to execute 'shasum -a 256 ./arg.bin' and compare the output with the command in the proposal.md file"
}

prepare_proposal_argument() {
  echo "You need at least the didc from 2024-07-29 https://github.com/dfinity/candid/releases/tag/2024-07-29"
  didc assist -d ./src/internet_identity/internet_identity.did -t '(opt InternetIdentityInit)' | awk '/\(/ {flag=1} flag {print} /\)/ {flag=0}' > args.txt
  didc encode "$(cat args.txt)" | xxd -r -p > arg.bin
}

append_proposal_argument() {
  # Get the arguments from the file
  ARGUMENTS=$(cat "args.txt")
  
  cat >> proposal.md << EOF

## Argument Verification

Run the following command to verify the upgrade argument hash:

\`\`\`
didc encode '${ARGUMENTS}' | xxd -r -p | sha256sum
\`\`\`

The output should match the argument hash.
EOF
}

download_proposal_text() {
  curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/dfinity/internet-identity/releases/latest | jq -cMr '.body' > proposal.md
}

dry_run_proposal() {
  # Download again the release tag wasm to check the hash along the latest downloaded before.
  curl -sSL https://github.com/dfinity/internet-identity/releases/download/$TAG_NAME/internet_identity_production.wasm.gz -o internet_identity-$TAG_NAME.wasm.gz
  # Read again the arguments to check the hash along the arg.bin file sent in the proposal.
  ARGUMENTS=$(cat "args.txt")
  ic-admin \
    --use-hsm \
    --key-id "01" \
    --slot 0 \
    --pin "$(read -p 'HSM PIN? '; echo "$REPLY")" \
    --nns-url "https://ic0.app" \
    propose-to-change-nns-canister \
    --proposer "$(read -p 'NEURON ID? '; echo "$REPLY")" \
    --canister-id rdmx6-jaaaa-aaaaa-aaadq-cai \
    --mode upgrade \
    --wasm-module-path ./internet_identity.wasm.gz \
    --wasm-module-sha256 "$(sha256 internet_identity-$TAG_NAME.wasm.gz)" \
    --arg arg.bin \
    --arg-sha256 "$(didc encode "$ARGUMENTS" | xxd -r -p | sha256sum | cut -f1 -d' ')" \
    --use-explicit-action-type \
    --dry-run \
    --summary-file ./proposal.md \
    --proposal-title "Upgrade Internet Identity Canister to $(git rev-parse --short HEAD)"
}

make_proposal() {
  # Download again the release tag wasm to check the hash along the latest downloaded before.
  curl -sSL https://github.com/dfinity/internet-identity/releases/download/$TAG_NAME/internet_identity_production.wasm.gz -o internet_identity-$TAG_NAME.wasm.gz
  # Read again the arguments to check the hash along the arg.bin file sent in the proposal.
  ARGUMENTS=$(cat "args.txt")
  ic-admin \
    --use-hsm \
    --key-id "01" \
    --slot 0 \
    --pin "$(read -p 'HSM PIN? '; echo "$REPLY")" \
    --nns-url "https://ic0.app" \
    propose-to-change-nns-canister \
    --proposer "$(read -p 'NEURON ID? '; echo "$REPLY")" \
    --canister-id rdmx6-jaaaa-aaaaa-aaadq-cai \
    --mode upgrade \
    --wasm-module-path ./internet_identity.wasm.gz \
    --wasm-module-sha256 "$(sha256 internet_identity-$TAG_NAME.wasm.gz)" \
    --arg arg.bin \
    --arg-sha256 "$(didc encode "$ARGUMENTS" | xxd -r -p | sha256sum | cut -f1 -d' ')" \
    --use-explicit-action-type \
    --summary-file ./proposal.md \
    --proposal-title "Upgrade Internet Identity Canister to $(git rev-parse --short HEAD)"
}

tag_proposal() {
  proposal_num=$(checklist_get "Proposal number")
  git tag -f "proposal-$proposal_num"
  git push origin "proposal-$proposal_num"
}

echo Checklist file: "$CHECKLIST_FILE"

record "Start time" date +"%Y-%m-%d %H:%M:%S"
confirm_cmd git fetch --tags --force
confirm_cmd git tag -f $TAG_NAME
record "Release commit" git rev-parse $TAG_NAME
record "New tag pushed" git push origin $TAG_NAME
confirm_cmd wait_for_release
confirm_manual "Edit release page title and text" wait_for_release_text_change
confirm_manual "Add archive canister if needed" wait_for_archive_canister_hash
confirm_cmd download_wasms
record "II WASM hash" sha256 internet_identity.wasm.gz
record "Archive WASM hash" sha256 archive.wasm.gz
confirm_manual "Request Run Verification Command" request_verification_command
confirm_cmd download_proposal_text
confirm_cmd prepare_proposal_argument
confirm_cmd append_proposal_argument
confirm_cmd deploy_release_candidate
confirm_manual "Confirm proposal arguments" confirm_proposal_arguments
confirm_manual "Test release candidate" test_release_candidate
confirm_cmd dry_run_proposal
confirm_manual "Review proposal" echo "Review the proposal above"
confirm_cmd make_proposal
record "Proposal number" bash -c 'read -p "Enter a proposal number: " num; echo "$num"'
confirm_cmd tag_proposal
confirm_manual "Invite Trusted Neurons" echo "Create a calendar invitation to the trusted neurons and identity team to vote on the proposal"

