#!/usr/bin/env bash

set -euo pipefail

# Make sure we always run from the root
SCRIPTS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPTS_DIR/.."

#########
# USAGE #
#########

function title() {
    echo "Builds Internet Identity and Archive Canisters"
}

function usage() {
    cat << EOF

Usage:
  $0 [--only-dependencies] [--internet-identity] [--archive] [--dfx-metadata METADATA]

Options:
  --only-dependencies          only build rust dependencies (no js build, no wasm optimization)
  --internet-identity          build the internet_identity canister (alongside other specifically mentioned canisters), defaults to --internet-identity
  --archive                    build the archive canister (alongside other specifically mentioned canisters), defaults to --internet-identity
  --dfx-metadata METADATA      DFX metadata to include in the canister public metadata section
EOF
}

function help() {
    cat << EOF

Builds the Internet Identity and the Archive canister.

NOTE: This requires a working rust toolchain as well as ic-wasm.
EOF

}

ONLY_DEPS=
CANISTERS=()
DFX_METADATA=

while [[ $# -gt 0  ]]
do
    case "$1" in
        -h|--help)
            title
            usage
            help
            exit 0
            ;;
        --only-dependencies)
            ONLY_DEPS=1
            shift
            ;;
        --internet-identity)
            CANISTERS+=("internet_identity")
            shift
            ;;
        --archive)
            CANISTERS+=("archive")
            shift
            ;;
        --dfx-metadata)
            DFX_METADATA="${2:?missing value for '--dfx-metadata'}"
            shift; # shift past --dfx-metadata and value
            shift;
            ;;
        *)
            echo "ERROR: unknown argument $1"
            usage
            echo
            echo "Use 'build --help' for more information"
            exit 1
            ;;
    esac
done

export II_VERSION=${II_VERSION:-$(./scripts/version)}
echo "The following version will be used: '$II_VERSION'"

# build II by default
if [ ${#CANISTERS[@]} -eq 0 ]; then
    CANISTERS=("internet_identity")
fi

# Checking for dependencies
if [[ ! "$(command -v ic-wasm)" || "$(ic-wasm --version)" != "ic-wasm 0.3.5" ]]
then
    echo "could not find ic-wasm 0.3.5"
    echo "ic-wasm version 0.3.5 is needed, please run the following command:"
    echo "  cargo install ic-wasm --version 0.3.5"
    exit 1
fi

# Builds a single canister
# build_canister CANISTER EXTRA_BUILD_ARGS...
# CANISTER: possible values: [internet_identity, archive]
# EXTRA_BUILD_ARGS: extra arguments supplied to cargo when building the canister
function build_canister() {
    local canister=$1
    shift
    local extra_build_args=("$@")

    echo "Building $canister"
    echo

    SRC_DIR="$PWD/src/$canister"
    TARGET="wasm32-unknown-unknown"
    # standardize source references
    CARGO_HOME="${CARGO_HOME:-"$HOME/.cargo"}"
    RUSTFLAGS="--remap-path-prefix $CARGO_HOME=/cargo"

    cargo_build_args=(
        --manifest-path "$SRC_DIR/Cargo.toml"
        --target "$TARGET"
        --release
        -j1
        )
    # XXX: for bash > 4.4, empty arrays are considered unset, so do some substitution
    cargo_build_args+=(${extra_build_args[@]+"${extra_build_args[@]}"})

    echo Running cargo build "${cargo_build_args[@]}"
    echo RUSTFLAGS: "$RUSTFLAGS"

    RUSTFLAGS="$RUSTFLAGS" cargo build "${cargo_build_args[@]}"

    if [ "$ONLY_DEPS" != "1" ]
    then
        CARGO_TARGET_DIR="${CARGO_TARGET_DIR:-$SRC_DIR/../../target/}"

        ic-wasm \
            "$CARGO_TARGET_DIR/$TARGET/release/$canister.wasm" \
            -o "./$canister.wasm" \
            shrink
        ic-wasm "$canister.wasm" -o "$canister.wasm" metadata candid:service -f "$SRC_DIR/$canister.did" -v public

        # indicate support for certificate version 1 and 2 in the canister metadata
        ic-wasm "$canister.wasm" -o "$canister.wasm" metadata supported_certificate_versions -d "1,2" -v public

        if [ "$canister" == "internet_identity" ]
        then
          # indicate the II canister init argument type
          ic-wasm "$canister.wasm" -o "$canister.wasm" metadata candid:args -d "(opt InternetIdentityInit)" -v public
        fi

        if [ -n "$DFX_METADATA" ]
        then
          ic-wasm "$canister.wasm" -o "$canister.wasm" metadata dfx -d "$DFX_METADATA" -v public
        fi
        gzip --no-name --force "$canister.wasm"
    fi
}

function build_internet_identity() {
  if [ "$ONLY_DEPS" != "1" ]
  then
      # Compile frontend assets to dist
      echo Compiling internet_identity frontend assets
      npm run build
  fi

  # This enables the "dummy_captcha" feature which makes sure the captcha string
  # is always "a".
  # WARNING: this MUST be opt-in, because we DO NOT want this in production.
  extra_build_args=()
  if [ "${II_DUMMY_CAPTCHA:-}" == "1" ]
  then
      echo "USING DUMMY CAPTCHA"
      extra_build_args+=( --features dummy_captcha )
  fi
  # This enables the "insecure_requests" feature which disables the content security policy directive
  # 'upgrade-insecure-requests'.
  # WARNING: this MUST be opt-in, because we DO NOT want this in production.
  if [ "${II_INSECURE_REQUESTS:-}" == "1" ]
  then
      echo "ALLOWING INSECURE REQUESTS"
      extra_build_args+=( --features insecure_requests )
  fi
  # XXX: for bash > 4.4, empty arrays are considered unset, so do some substitution
  build_canister "internet_identity" ${extra_build_args[@]+"${extra_build_args[@]}"}
}

for canister in "${CANISTERS[@]}"
do
  if [ "$canister" == "internet_identity" ]
  then
    build_internet_identity
  else
    build_canister "$canister"
  fi
done
