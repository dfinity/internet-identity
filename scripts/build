#!/usr/bin/env bash

set -euo pipefail

# Make sure we always run from the root
SCRIPTS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPTS_DIR/.."

#########
# USAGE #
#########

function title() {
    echo "Build Internet Identity"
}

function usage() {
    cat << EOF

Usage:
  $0 [--only-dependencies]

Options:
  --only-dependencies   only build rust dependencies (no js build, no wasm optimization)
EOF
}

function help() {
    cat << EOF

Builds the Internet Identity canister.

NOTE: This requires a working rust toolchain as well as ic-cdk-optimizer.
EOF

}

ONLY_DEPS=

while [[ $# -gt 0  ]]
do
    case "$1" in
        -h|--help)
            title
            usage
            help
            exit 0
            ;;
        --only-dependencies)
            ONLY_DEPS=1
            shift
            ;;
        *)
            echo "ERROR: unknown argument $1"
            usage
            echo
            echo "Use 'build --help' for more information"
            exit 1
            ;;
    esac
done

# Checking for dependencies
if [[ ! "$(command -v ic-cdk-optimizer)" || "$(ic-cdk-optimizer --version)" != "ic-cdk-optimizer 0.3.4" ]]
then
    echo "could not find ic-cdk-optimizer 0.3.4"
    echo "ic-cdk-optimizer version 0.3.4 is needed, please run the following command:"
    echo "  cargo install ic-cdk-optimizer --version 0.3.4"
    exit 1
fi

if [ "$ONLY_DEPS" != "1" ]
then
    # Compile frontend assets to dist
    echo Compiling frontend assets
    npm run build
fi

II_DIR="$PWD/src/internet_identity"
TARGET="wasm32-unknown-unknown"

# standardize source references
CARGO_HOME="${CARGO_HOME:-"$HOME/.cargo"}"
RUSTFLAGS="--remap-path-prefix $CARGO_HOME=/cargo"

cargo_build_args=(
    --manifest-path "$II_DIR/Cargo.toml"
    --target "$TARGET"
    --release
    -j1
    )

# This enables the "dummy_captcha" feature which makes sure the captcha string
# is always "a".
# WARNING: this MUST be opt-in, because we DO NOT want this in production,
# EVAR.
if [ "${II_DUMMY_CAPTCHA:-}" == "1" ]
then
    echo "USING DUMMY CAPTCHA"
    cargo_build_args+=( --features dummy_captcha )
fi

echo Running cargo build "${cargo_build_args[@]}"
echo RUSTFLAGS: "$RUSTFLAGS"

RUSTFLAGS="$RUSTFLAGS" cargo build "${cargo_build_args[@]}"

if [ "$ONLY_DEPS" != "1" ]
then
    CARGO_TARGET_DIR="${CARGO_TARGET_DIR:-$II_DIR/../../target/}"

    ic-cdk-optimizer \
        "$CARGO_TARGET_DIR/$TARGET/release/internet_identity.wasm" \
        -o "./internet_identity.wasm"
fi
