#!/bin/bash

OUTPUT_FILE="args.txt"
BIN_FILE="arg.bin"

# Description
# 
# This Bash script interactively gathers user input for the InternetIdentityInit parameters,
# formats them in Candid syntax, and then encodes them into a binary file (arg.bin) using didc encode.
# The encoded file can be used for canister upgrades or deployments on the Internet Computer blockchain.
# 
# Each field in InternetIdentityInit is optional, and users can choose which fields to configure.
# The script ensures the correct structure for nested records and optional values.
# 
# The values are hardcoded in the script and doesn't check the value of `InterentIdentityInit` in the source code.

echo "Initializing InternetIdentityInit values..."
> "$OUTPUT_FILE"

# Function to request optional fields
request_opt_field() {
    local prompt="$1"
    local var_name="$2"
    
    read -p "$prompt (leave empty to skip): " value
    if [[ -n "$value" ]]; then
        printf " $var_name = $value;" >> "$OUTPUT_FILE"
    fi
}

# Function to request required fields inside an optional record
request_opt_record_field() {
    local prompt="$1"
    local var_name="$2"

    read -p "$prompt: " value
    if [[ -n "$value" ]]; then
      printf " $var_name = opt $value;" >> "$OUTPUT_FILE"
    else
      printf " $var_name = null;" >> "$OUTPUT_FILE"
    fi
}

read -p "Do you want to change the arguments? (y/n): " change_args
if [[ "$change_args" =~ ^[Yy]$ ]]; then
    # Start building Candid argument record
    printf "(record {" >> "$OUTPUT_FILE"

    # Assigned user number range (optional)
    read -p "Do you want to enter assigned_user_number_range? (y/n): " assigned_user_choice
    if [[ "$assigned_user_choice" =~ ^[Yy]$ ]]; then
        printf " assigned_user_number_range = opt (record {" >> "$OUTPUT_FILE"
        request_opt_record_field "  Min (nat64)" "min"
        request_opt_record_field "  Max (nat64)" "max"
        printf " });" >> "$OUTPUT_FILE"
    fi

    # Archive config (optional)
    read -p "Do you want to enter archive_config? (y/n): " archive_choice
    if [[ "$archive_choice" =~ ^[Yy]$ ]]; then
        printf " archive_config = opt (record {" >> "$OUTPUT_FILE"
        request_opt_record_field "  Module Hash (blob, hex-encoded)" "module_hash"
        request_opt_record_field "  Entries Buffer Limit (nat64)" "entries_buffer_limit"
        request_opt_record_field "  Entries Fetch Limit (nat16)" "entries_fetch_limit"
        request_opt_record_field "  Polling Interval (ns, nat64)" "polling_interval_ns"
        printf " });" >> "$OUTPUT_FILE"
    fi

    # Canister creation cycles cost (optional)
    request_opt_field "Enter canister_creation_cycles_cost (nat64)" "canister_creation_cycles_cost"

    # Register rate limit (optional)
    read -p "Do you want to enter register_rate_limit? (y/n): " rate_limit_choice
    if [[ "$rate_limit_choice" =~ ^[Yy]$ ]]; then
        printf " register_rate_limit = opt (record {" >> "$OUTPUT_FILE"
        request_opt_record_field "  Time Per Token (ns, nat64)" "time_per_token_ns"
        request_opt_record_field "  Max Tokens (nat64)" "max_tokens"
        printf " });" >> "$OUTPUT_FILE"
    fi

    # Captcha config (optional)
    read -p "Do you want to enter captcha_config? (y/n): " captcha_choice
    if [[ "$captcha_choice" =~ ^[Yy]$ ]]; then
        printf " captcha_config = opt (record {" >> "$OUTPUT_FILE"
        request_opt_record_field "  Max Unsolved Captchas (nat64)" "max_unsolved_captchas"
        read -p "  Enter captcha_trigger type (Static or Dynamic): " captcha_trigger
        if [[ "$captcha_trigger" == "Static" ]]; then
            read -p "  Enable Captcha? (y/n): " static_choice
            if [[ "$static_choice" =~ ^[Yy]$ ]]; then
                printf " captcha_trigger = variant { Static = variant { CaptchaEnabled } };" >> "$OUTPUT_FILE"
            else
                printf " captcha_trigger = variant { Static = variant { CaptchaDisabled } };" >> "$OUTPUT_FILE"
            fi
        elif [[ "$captcha_trigger" == "Dynamic" ]]; then
            printf " captcha_trigger = variant { Dynamic = record {" >> "$OUTPUT_FILE"
            request_opt_record_field "    Threshold Percentage (nat16)" "threshold_pct"
            request_opt_record_field "    Current Rate Sampling Interval (s, nat64)" "current_rate_sampling_interval_s"
            request_opt_record_field "    Reference Rate Sampling Interval (s, nat64)" "reference_rate_sampling_interval_s"
            printf "  }};" >> "$OUTPUT_FILE"
        fi
        printf " });" >> "$OUTPUT_FILE"
    fi

    # Related Origins (optional)
    read -p "Do you want to enter related_origins? (y/n): " origins_choice
    if [[ "$origins_choice" =~ ^[Yy]$ ]]; then
        printf " related_origins = opt vec { " >> "$OUTPUT_FILE"
        while true; do
            read -p "  Enter a related origin (leave empty to finish): " origin
            [[ -z "$origin" ]] && break
            echo " $origin;" >> "$OUTPUT_FILE"
        done
        printf " };" >> "$OUTPUT_FILE"
    fi

    # OpenID Google Config (optional)
    read -p "Do you want to enter openid_google config? (y/n): " google_choice
    if [[ "$google_choice" =~ ^[Yy]$ ]]; then
        printf "openid_google = opt opt (record {" >> "$OUTPUT_FILE"
        request_opt_record_field "  Client ID (text)" "client_id"
        printf " });" >> "$OUTPUT_FILE"
    fi

    # Web Analytics Config (optional)
    read -p "Do you want to enter analytics_config? (y/n): " analytics_choice
    if [[ "$analytics_choice" =~ ^[Yy]$ ]]; then

        read -p "Do you want to disable? (y/n): " analytics_disable
        if [[ "$analytics_disable" =~ ^[Yy]$ ]]; then
            printf " analytics_config = opt null;" >> "$OUTPUT_FILE"
        else
            printf " analytics_config = opt opt (variant { Plausible = record {" >> "$OUTPUT_FILE"
            request_opt_record_field "  Optional Domain (text)" "domain"
            request_opt_record_field "  Optional Hash Mode (bool, enter true or false)" "hash_mode"
            request_opt_record_field "  Optional Track Localhost (bool, enter true or false)" "track_localhost"
            request_opt_record_field "  Optional API Host (text)" "api_host"
            printf " }});" >> "$OUTPUT_FILE"
        fi
    fi

    # Close record
    printf " })" >> "$OUTPUT_FILE"
else
    printf "(null)" >> "$OUTPUT_FILE"
fi

echo "Generated Candid argument file: $OUTPUT_FILE"
ARGUMENTS=$(cat "$OUTPUT_FILE")
echo ""

# Encode to arg.bin
didc encode < "$OUTPUT_FILE" | xxd -r -p > "$BIN_FILE"

echo "Encoded arguments saved to: $BIN_FILE"
echo ""
echo "Add the following section at the bottom of the proposal.md file:"
echo "----------"
echo "## Argument Verification"
echo ""
echo "Run the following command to verify the upgrade argument hash:"
echo ""
echo "\`\`\`"
echo "didc encode '$ARGUMENTS' | xxd -r -p | sha256sum"
echo "\`\`\`"
echo ""
echo "The output should match the argument hash."
echo "----------"

echo "Confirm that sha256sum of the file matches the proposal argument:"
echo "$(shasum -a 256 "$BIN_FILE")"
ARGUMENTS_HASH=$(didc encode "$ARGUMENTS" | xxd -r -p | sha256sum)
echo "$ARGUMENTS_HASH arguments hash"