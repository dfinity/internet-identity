#!/usr/bin/env bash
set -euo pipefail

declare -a filenames=( )
declare tag_name

function title() {
    echo "Release Internet Identity"
}

function usage() {
    cat << EOF
Usage:
  release --tag TAG [-- FILE...]

Options:
  --tag TAG     specify the tag to release
EOF
}

function help() {
    cat << EOF


Any files specified after '--' will be uploaded as release assets.

NOTE: This does not generate release notes. A link will be displayed when the
release is created. Visit that link to write release notes and click "Auto-generate release notes"
to add contributions and commit information.
EOF

}

function need_cmd() {
    if ! command -v "$1" >/dev/null
    then
        echo "please install $1"
    fi
}

# GitHub Helpers
# https://docs.github.com/en/rest/reference/releases#list-releases

# token needs repo/public_repo scope
function check_token() {
    if [ -z "${GITHUB_TOKEN:-}" ]
    then
        echo "https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"
        exit 1
    fi
}

function gh() {
    local path=$1
    shift
    if [[ $path != https://* ]]
    then
        path="https://api.github.com/${path#"/"}"
    fi

    local output; output=$(mktemp)
    local http_code
    # NOTE: cannot use `--fail-with-body` because it's not available on GHA
    http_code=$(curl -w '%{http_code}' -o "$output" --silent  \
            --header "accept: application/vnd.github.v3+json" \
            --header "authorization: token $GITHUB_TOKEN" \
            "$path" \
            "$@")

    if [[ $http_code == 2* ]]
    then
        cat "$output"
        rm "$output"
    else
        >&2 echo "Failed ($?) request to '$path' with '$*'"
        >&2 jq <"$output"
        rm "$output"
        exit 1
    fi
}

function gh_post_json() {
    local path="$1"
    shift
    gh "$path" --header "content-type: application/json" \
        --data-binary @- \
        "$@"
}

function gh_post_tgz() {
    local path="$1"
    local filename="$2"
    shift; shift
    gh "$path" --header "content-type: application/gzip" \
        --data-binary "@$filename" \
        "$@"
}

# Actual release function

function do_release() {
    local release_json
    release_json=$(jq -n --arg tag_name "$tag_name" '{ tag_name: $tag_name }' \
        | gh_post_json /repos/dfinity/internet-identity/releases)

    local release_id; release_id=$(echo "$release_json" | jq -cMr '.id')
    local html_url; html_url="$(echo "$release_json" | jq -cMr '.html_url')"

    echo "created release $release_id ($html_url)"

    if [ ${#filenames[@]} -eq 0 ]
    then
        echo "no files to upload"
    else
        echo "uploading assets"
        for filename in "${filenames[@]}"
        do
            filename=$(basename "$filename")
            echo -n " - $filename"
            echo "$release_json" | jq
            local upload_url; upload_url=$(echo "$release_json" | jq -cMr '.upload_url' | sed "s/{.*}/?name=$filename/")
            echo "upload url: $upload_url"
            gh_post_tgz "$upload_url" "$filename" >/dev/null
            echo " (done)"
        done
    fi

    echo "done creating release"
    echo "  $html_url"
}

# ARGUMENT PARSING

while [[ $# -gt 0 ]]
do
    case $1 in
        --help)
            title
            usage
            help
            exit 0
            ;;
        --tag)
            echo "$@"
            tag_name="${2:?missing value for '--tag'}"
            shift; # shift past --tag and value
            shift;
            echo "$@"
            ;;
        --)
            shift
            for filename in "$@"
            do
                filenames+=( "$filename" )
                shift
            done
            ;;
        *)
            echo "ERROR: unknown argument $1"
            usage
            echo
            echo "Use 'release --help' for more information."
            exit 1
            ;;
    esac
done

check_token

if [ -z "$tag_name" ]
then
    echo no tag name
    usage
    exit 1
fi

need_cmd "curl"
need_cmd "jq"

do_release
