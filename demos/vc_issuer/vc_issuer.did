type CredentialSpec = record { info : text };
type GetCredentialRequest = record {
    signed_id_alias : SignedIdAlias;
    vc_jwt : text;
    credential_spec : CredentialSpec;
};
type GetCredentialResponse = variant { Ok : IssuedCredentialData; Err : text };
type Icrc21ConsentInfo = record { consent_message : text; language : text };
type Icrc21ConsentMessageRequest = record {
    arg : vec nat8;
    method : text;
    preferences : Icrc21ConsentPreferences;
};
type Icrc21ConsentMessageResponse = variant {
    Ok : Icrc21ConsentInfo;
    Err : Icrc21Error;
};
type Icrc21ConsentPreferences = record { language : text };
type Icrc21Error = variant {
    GenericError : Icrc21ErrorInfo;
    MalformedCall : Icrc21ErrorInfo;
    NotSupported : Icrc21ErrorInfo;
    Forbidden : Icrc21ErrorInfo;
};
type Icrc21ErrorInfo = record { description : text; error_code : nat64 };
type IssuedCredentialData = record { vc_jws : text };
type PrepareCredentialRequest = record {
    signed_id_alias : SignedIdAlias;
    credential_spec : CredentialSpec;
};
type PrepareCredentialResponse = variant {
    Ok : PreparedCredentialData;
    Err : text;
};
type PreparedCredentialData = record { vc_jwt : text };
type SignedIdAlias = record {
    credential_jws : text;
    id_alias : principal;
    id_dapp : principal;
};
service : {
    consent_message : (Icrc21ConsentMessageRequest) -> (
    Icrc21ConsentMessageResponse,
    );
    get_credential : (GetCredentialRequest) -> (GetCredentialResponse) query;
    prepare_credential : (PrepareCredentialRequest) -> (
    PrepareCredentialResponse,
    );
}
