/// Candid interface of the example VC issuer canister.
/// The interface contains both the functionality required by the VC-spec
/// (https://github.com/dfinity/internet-identity/blob/main/docs/vc-spec.md)
/// and additional APIs for configuring the canister and using it for testing.

/// Specification of a requested credential.
type CredentialSpec = record {
    credential_type : text;
    /// arguments are optional, and specific to the credential_name
    arguments : opt vec record { text; ArgumentValue };
};
type ArgumentValue = variant { "Int" : int32; String : text };

/// Messages for ICRC-21 consent message, cf.
/// https://github.com/dfinity/wg-identity-authentication/blob/main/topics/icrc_21_consent_msg.md
type Icrc21ConsentInfo = record { consent_message : text; language : text };
type Icrc21ConsentMessageResponse = variant {
    Ok : Icrc21ConsentInfo;
    Err : Icrc21Error;
};
type Icrc21ConsentPreferences = record { language : text };
type Icrc21Error = variant {
    GenericError : Icrc21ErrorInfo;
    UnsupportedCanisterCall : Icrc21ErrorInfo;
    ConsentMessageUnavailable : Icrc21ErrorInfo;
};
type Icrc21ErrorInfo = record { description : text; error_code : nat64 };
type Icrc21VcConsentMessageRequest = record {
    preferences : Icrc21ConsentPreferences;
    credential_spec : CredentialSpec;
};

/// Messages for requesting issuance of a credential.
/// The issuance proceeds in two steps:
///  - `prepare_credential`, and
///  - `get_credential`
/// where the split of work between the two steps depends on the specifics of the issuer,
/// and the second second step returns the actual credential (if any).
/// The two steps can use `prepared_context`-value to transfer information between them.

/// Messages for `prepare_credential`.
type PrepareCredentialRequest = record {
    signed_id_alias : SignedIdAlias;
    credential_spec : CredentialSpec;
};
type PrepareCredentialResponse = variant {
    Ok : PreparedCredentialData;
    Err : IssueCredentialError;
};
type PreparedCredentialData = record { prepared_context : opt vec nat8 };

/// Messages for `get_credential`.
type GetCredentialRequest = record {
    signed_id_alias : SignedIdAlias;
    credential_spec : CredentialSpec;
    prepared_context : opt vec nat8;
};
type GetCredentialResponse = variant {
    Ok : IssuedCredentialData;
    Err : IssueCredentialError;
};

type SignedIdAlias = record {
    credential_jws : text;
};
type IssuedCredentialData = record { vc_jws : text };
type IssueCredentialError = variant {
    /// The caller is not known to the issuer.  Caller should register first with the issuer before retrying.
    UnknownSubject : text;
    /// The caller is not authorized to obtain the requested credential.  Caller requested a credential
    /// for a different principal, or the issuer does not have sufficient knowledge about the caller
    /// to issue the requested credential.
    UnauthorizedSubject : text;
    /// The id_alias credential provided by the identity provider is invalid.
    InvalidIdAlias : text;
    /// The issuer does not issue credentials described in the credential spec.
    UnsupportedCredentialSpec : text;
    /// Internal errors, indicate malfunctioning of the issuer.
    SignatureNotFound : text;
    Internal : text;
};

/// Configuration specific to this issuer.
type IssuerConfig = record {
    /// Root of trust for checking canister signatures.
    ic_root_key_der : blob;
    /// List of canister ids that are allowed to provide id alias credentials.
    idp_canister_ids : vec principal;
};

/// Options related to HTTP handling

type HeaderField = record {
    text;
    text;
};

type HttpRequest = record {
    method: text;
    url: text;
    headers: vec HeaderField;
    body: blob;
};

type HttpResponse = record {
    status_code: nat16;
    headers: vec HeaderField;
    body: blob;
};

service: (opt IssuerConfig) -> {
    /// VC-flow API.
    vc_consent_message : (Icrc21VcConsentMessageRequest) -> (Icrc21ConsentMessageResponse);
    prepare_credential : (PrepareCredentialRequest) -> (PrepareCredentialResponse);
    get_credential : (GetCredentialRequest) -> (GetCredentialResponse) query;

    /// Configure the issuer (e.g. set the root key), used for deployment/testing.
    configure: (IssuerConfig) -> ();

    /// API for obtaining information about users, for testing only.
    /// In a real-world issuer the data acquisition functionality should be more elaborate and authenticated.
    add_employee : (principal) -> (text);
    add_graduate : (principal) -> (text);


    /// Serve the app
    http_request: (request: HttpRequest) -> (HttpResponse) query;
}
