---
import Layout from "../layouts/Layout.astro";
---

<Layout title="VC test app">
  <main id="pageContent" aria-live="polite"></main>

  <script>
    import { html } from "lit-html";
    import { AuthClient } from "@dfinity/auth-client";
    import { nonNullish, isNullish } from "@dfinity/utils";
    import { asyncReplace } from "lit-html/directives/async-replace.js";
    import { createRef, ref } from "lit-html/directives/ref.js";
    import { decodeJwt } from "jose";
    import { z } from "zod";
    import { Principal } from "@dfinity/principal";
    import { Chan, renderPage, withRef } from "../utils";

    export type ArgumentValue = { int: number } | { string: string };

    /* Convert the JSON map/record into what the did spec expects */
    const fixupArgs = (
      arg: Record<string, string | number>,
    ): Array<[string, ArgumentValue]> => {
      return Object.entries(arg).map(([k, v]) => [
        k,
        typeof v === "string" ? { string: v } : { int: v },
      ]);
    };

    const zodPrincipal = z.string().transform((val, ctx) => {
      let principal;
      try {
        principal = Principal.fromText(val);
      } catch {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: "Not a principal ",
        });
        return z.NEVER;
      }

      return principal;
    });

    // Parse & validate a CredentialSpec
    const zodCredentialSpec = z
      /* The input object */
      .object({
        credentialName: z.string(),
        arguments: z.optional(
          z.record(z.string(), z.union([z.string(), z.number()])),
        ),
      })
      /* Transform to make the type easier to use:
       *    - transform the arguments to whatever the did spec expects
       *    - work around the JS type gen weirdness for optionals
       * XXX: TS needs the type annotation or it gets slightly confused
       */
      .transform<{
        credential_name: string;
        arguments: [] | [Array<[string, ArgumentValue]>];
      }>(({ credentialName, arguments: args }) => ({
        credential_name: credentialName,
        arguments: isNullish(args) ? [] : [fixupArgs(args)],
      }));

    // https://www.jsonrpc.org/specification
    // https://github.com/dfinity/internet-identity/blob/vc-mvp/docs/vc-spec.md#identity-provider-api
    export const VcFlowRequest = z.object({
      id: z.union([
        z.number(),
        z.string(),
      ]) /* Slightly lax; in principle jsonrpc does not allow fractional numbers as id */,
      jsonrpc: z.literal("2.0"),
      method: z.literal("request_credential"),
      params: z.object({
        issuer: z.object({
          origin: z
            .string()
            .url() /* XXX: we limit to URLs, but in practice should even be an origin */,
          canisterId: z.optional(zodPrincipal),
        }),
        credentialSpec: zodCredentialSpec,
        credentialSubject: zodPrincipal,
      }),
    });

    // The wire format of a VC flow request
    export type VcFlowRequestWire = z.input<typeof VcFlowRequest>;

    const inferDefaultIIURL = () => {
      if (window.location.hostname === "localhost") {
        return (
          window.location.protocol + "//" + window.location.hostname + ":5173/"
        );
      }

      return "https://identity.ic0.app/";
    };

    const latestPres = new Chan<string | undefined>(undefined);
    const ii = new Chan<
      { win: Window; origin: string; flowId: number } | undefined
    >(undefined);
    const evntHandler = (evnt: MessageEvent) => {
      console.log(
        `Got:
        ${JSON.stringify(evnt.data, (_key, value) =>
          typeof value === "bigint" ? value.toString() : value,
        )}`,
      );

      if (evnt.data?.method === "vc-flow-ready" && nonNullish(ii.latest)) {
        const principal = withRef(principalInput, (principalInput) => {
          const value = principalInput.value;
          if (value === "") {
            return undefined;
          }

          return value;
        });

        if (isNullish(principal)) {
          alert("No principal set; cannot send request ");
          return;
        }

        const issuerOrigin = withRef(issuerInput, (issuerInput) => {
          const value = issuerInput.value;
          if (value === "") {
            return undefined;
          }

          return value;
        });
        if (isNullish(issuerOrigin)) {
          alert("No issuer set; cannot send request ");
          return;
        }

        const credentialSpecs = {
          employee: {
            credentialName: "VerifiedEmployee",
            arguments: { employerName: "DFINITY Foundation" },
          },
          grad: {
            credentialName: "UniversityDegreeCredential",
            arguments: { institutionName: "DFINITY College of Engineering" },
          },
        } as const;

        ii.latest?.win.postMessage(
          {
            id: ii.latest.flowId,
            jsonrpc: "2.0",
            method: "request_credential",
            params: {
              issuer: {
                origin: issuerOrigin,
              },
              credentialSpec: credentialSpecs[credentialType.latest],
              credentialSubject: principal,
            },
          } satisfies VcFlowRequestWire,
          ii.latest.origin,
        );
      }

      const verifiablePresentation = evnt.data?.result?.verifiablePresentation;
      if (nonNullish(verifiablePresentation)) {
        const ver = decodeJwt(verifiablePresentation) as any;
        const creds = ver.vp.verifiableCredential;

        const pretty = creds.map((cred: string) =>
          JSON.stringify(decodeJwt(cred), null, 2),
        );
        latestPres.send(pretty.join("\n"));

        ii.latest?.win?.close();
      }
    };

    // TODO: we should wait for ready
    window.addEventListener("message", evntHandler);
    const nextId = new Chan<number>(0);
    const urlInput = createRef<HTMLInputElement>();
    const issuerInput = createRef<HTMLInputElement>();
    const principalInput = createRef<HTMLInputElement>();

    const credentialType = new Chan<"grad" | "employee">("employee");
    const credentialSelection = (exp: "grad" | "employee") =>
      asyncReplace(
        credentialType.map((ty) => (ty === exp ? "c-button--selected" : "")),
      );

    const template = () => {
      return html`
        <div class="l-wrap" data-page-name="vc-test-app">
          <hgroup>
            <h1 class="t-title">Relying Party</h1>
          </hgroup>
          <input
          ${ref(principalInput)}

                data-role="principal"
                class="c-input c-input--stack c-input--fullwidth"
                placeholder="principal (ID_RP)"
                ></input>
          <button
            class="c-button"
            data-action="authenticate"
            @click=${async () => {
              const authClient = await AuthClient.create();

              const iiUrl = withRef(urlInput, (i) => i.value);

              const loginOptions: Parameters<typeof authClient.login>[0] = {
                identityProvider: iiUrl,
                onSuccess: () => {
                  withRef(principalInput, (principalInput) => {
                    principalInput.value = authClient
                      .getIdentity()
                      .getPrincipal()
                      .toString();
                  });
                },
                onError: (e) => {
                  alert(e ?? "Unknown error");
                },
              };

              authClient.login(loginOptions);
            }}
            >Login to Relying Party </button>

          <input
          ${ref(urlInput)}
          data-role="ii-url"
        class="c-input c-input--stack c-input--fullwidth"
        value=${inferDefaultIIURL()}
          ></input>
          <input
          ${ref(issuerInput)}
          data-role="issuer-url"
        class="c-input c-input--stack c-input--fullwidth"
        value="http://issuer.localhost:5173"
          ></input>
          <div class="c-button-group l-stack">
          <div @click=${() => {
            credentialType.send("employee");
          }} class="c-button c-button--secondary ${credentialSelection(
            "employee",
          )}">
          Employee
          </div>
          <div @click=${() => {
            credentialType.send("grad");
          }} class="c-button c-button--secondary ${credentialSelection(
            "grad",
          )}">
          Graduate
          </div>
          </div>
          <button
            data-role="start-vc-flow"
            class="c-button l-stack"
            @click=${() => {
              const urlRaw = withRef(urlInput, (urlInput) => urlInput.value);
              if (isNullish(urlRaw)) {
                alert("Could not read URL");
                return;
              }

              const urlParsed = new URL(urlRaw);
              urlParsed.pathname = "vc-flow/";

              const iiWindow = window.open(urlParsed.toString());
              if (isNullish(iiWindow)) {
                alert("Could not open window");
                return;
              }

              const flowId = nextId.latest;
              ii.send({ win: iiWindow, origin: urlParsed.toString(), flowId });

              nextId.send(flowId + 1);
            }}
          >
            Verify Credential
          </button>
          ${asyncReplace(
            latestPres.map((latestPres) =>
              isNullish(latestPres)
                ? undefined
                : html`
                    <aside
                      style="max-width: 100%;"
                      class="l-stack c-card c-card--narrow"
                    >
                      <pre>    ${latestPres}</pre>
                    </aside>
                  `,
            ),
          )}
        </div>
      `;
    };

    const page = renderPage(template);

    page(undefined);
  </script>
</Layout>
