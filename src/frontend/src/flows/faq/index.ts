import { TemplateResult, html, render } from "lit-html";

export interface Link {
  name: string;
  link: string;
}

export interface Question {
  /** The actual question, i.e. "Why is the sun hot?" */
  question: string;
  /** The HTML anchor.
   * Given an anchor 'why-sun-hot', the question can be linked to using `faq#why-sun-hot`.
   */
  anchor: string;
  /** The actual answer, i.e. "Because fusion" */
  answer: string | TemplateResult;
  /** Some useful links that the reader can refer to. */
  links: Array<Link>;
}

/** All the questions displayed on the FAQ */
export const questions = {
  windowsHello: {
    priority: 10,
    question: "Does Internet Identity support Windows Hello?",
    anchor: "windows-hello",
    answer: html`<span
      >Yes! Internet Identity supports authenticating via
      ${mkExternalLink({
        href: "https://support.microsoft.com/en-us/windows/learn-about-windows-hello-and-set-it-up-dae28983-8242-bb2a-d3d1-87c9d265a5f0",
        text: "Windows Hello",
      })}.
      If Windows Hello is set up on your PC then Internet Identity will offer
      you to authenticate through Windows Hello.</span
    >`,
    links: [
      {
        name: "Windows Hello Guide for Internet Identity",
        link: "https://sdk.dfinity.org/docs/ic-identity-guide/hello-guide.html",
      },
    ],
  },
  lostDevice: {
    priority: 1,
    question: "If I lose my device, can I still use Internet Identity?",
    anchor: "lost-device",
    answer:
      "If you have an Identity Anchor tied to only one device and you lose that one device, you will be locked out. As a best practice, we recommend adding multiple devices multiple devices and recovery mechanisms to every Identity Anchor.",
    links: [
      {
        name: "Device Management How-To",
        link: "https://sdk.dfinity.org/docs/ic-identity-guide/auth-how-to.html",
      },
    ],
  },
  moreDevices: {
    priority: 1,
    question: "How do I add more devices to my Identity Anchor?",
    anchor: "more-devices",
    answer:
      "To add more devices to an existing Identity Anchor, please see the guide here:",
    links: [
      {
        name: "How to add a device",
        link: "https://sdk.dfinity.org/docs/ic-identity-guide/auth-how-to.html#_add_a_device",
      },
    ],
  },
  shareIIAnchor: {
    priority: 10,
    question:
      "Does Internet Identity share my anchor or personal information with DApps?",
    anchor: "share-ii-anchor",
    answer:
      'No. Internet Identity uses a different Principal (a "pseudonym") for each DApp that you authenticate to using Internet Identity. Since the pseudonyms Internet Identity generates for you are different for each DApp, DApps cannot use them to track you outside of their realm.',
    links: [],
  },
  invalidSeedphrase: {
    priority: 10,
    question:
      'Why do I get "Invalid Seedphrase" when I try to recover my Identity Anchor?',
    anchor: "invalid-seedphrase",
    answer: `
    Most likely, it means that the recovery phrase (also known as seed phrase) is not BIP39 compatible.

    A recovery phrase generated by Internet Identity will contain an anchor number followed by some words. For instance, "135033-squirrel-soccer-...". The number is the anchor for which the recovery phrase is generated; note that Internet Identity will strip the number before trying to recover an Identity, meaning the number is only meant for humans!

    What Internet Identity will check, on the other hand, is that the remainder (the seed phrase without the anchor) is BIP39-compatible. Do note that some BIP39 backup solutions only allow storing the first 4 letters in accordance with the BIP39 protocol. While BIP39 was designed such that only using the first 4 letters of each word, Internet Identity will not "re-inflate" the words for you, and you may need to do that in order to recover your anchor.
        `,
    links: [
      {
        name: "BIP39",
        link: "https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki",
      },
    ],
  },
};

// The questions, sorted lexicographically (by anchor) and then by Priority.
export const questionsArray = Object.values(questions)
  .sort((a, b) => {
    return a.anchor > b.anchor ? +1 : -1;
  })
  .sort((a, b) => a.priority - b.priority);

// The rendered (list item) question
function renderQuestion(faq: Question) {
  return html`<li
    class="faq__question"
  >
    <details
    id=${faq.anchor} >
    <summary class="faq__question-summary">
      ${faq.question}
    <div class="faq__question-underline"></div>
    </summary>
    <div>
      <p class="faq__answer">${faq.answer}</p>
      ${faq.links.length > 0 ? renderFaqLinks(faq.links) : ""}
    </div>
  </li>`;
}

function renderFaqLinks(links: Link[]) {
  return html` <ul class="faq__answer-links">
    ${Object.values(links)
      .sort((a, b) => {
        return a.link < b.link ? -1 : 1;
      })
      .map(
        (link) =>
          html`<li>
            &middot;
            ${mkExternalLink({ href: link.link, text: `${link.name}` })}
          </li>`
      )}
  </ul>`;
}

/** Make a "safe" link that opens in a new tab with noopener & noreferrer. */
export function mkExternalLink(link: {
  href: string;
  text: string;
}): TemplateResult {
  return html`<a
    rel="noopener noreferrer"
    href="${link.href}"
    class="faq__answer-link"
    target="_blank"
    >${link.text} &#8599;</a
  >`;
}

// The FAQ page
const pageContent = html`
  <style>
    /* briefly flash the question when redirected to a particular question */
    @keyframes flash-question {
      0% {
        background-color: transparent;
      }
      50% {
        background-color: var(--rainbow-orange);
        border-radius: 0.3em;
      }
      100% {
        background-color: transparent;
      }
    }
    :target {
      animation-name: flash-question;
      animation-duration: 600ms;
    }
  </style>
  <div class="faq__container">
    <h1 class="faq__title">FAQ</h1>
    <ul class="faq__questions">
      ${questionsArray.map((faq) => renderQuestion(faq))}
    </ul>
  </div>
`;

// Open the anchor with id="foo" if the page hash is "#foo"
const openAnchor = (): void => {
  const hash = location.hash.substring(1);

  if (hash !== "") {
    const details = document.getElementById(hash);
    console.log(details);

    if (details) {
      details.setAttribute("open", "");
    }
  }
};

export const faqView = (): void => {
  document.title = "FAQ | Internet Identity";
  const container = document.getElementById("pageContent") as HTMLElement;
  render(pageContent, container);
  openAnchor(); // needs to happen after DOM was rendered
};
