---
import Screen from "../layouts/Screen.astro";
---

<Screen title="Display Manage" pageName="displayManage">
  <script>
    import { toast } from "$src/components/toast";
    import { userNumber } from "../constants";
    import { dapps } from "../constants";
    import { displayManagePage } from "$src/flows/manage";
    import { html } from "lit-html";
    import identityCardBackground from "$src/assets/identityCardBackground.png";
    import { PreLoadImage } from "$src/utils/preLoadImage";

    const identityBackground = new PreLoadImage(identityCardBackground.src);

    displayManagePage({
      identityBackground,
      userNumber,
      devices: {
        authenticators: [
          {
            alias: "Chrome on iPhone",
            isCurrent: true,
            rename: () => toast.info("rename"),
            last_usage: [BigInt(Date.now() * 1000000)],
            canBeRemoved: false,
            // TODO: Replace with mock device
            device: true as unknown as any
          },
          {
            alias: "Yubikey Blue",
            isCurrent: false,
            rename: () => toast.info("rename"),
            last_usage: [
              BigInt(Date.now() * 1000000 - 1_000_000_000 * 60 * 60 * 24 * 7)
            ],
            canBeRemoved: false,
            device: true as unknown as any
          },
          {
            alias: "Yubikey Blue",
            isCurrent: false,
            rename: () => toast.info("rename"),
            last_usage: [
              BigInt(Date.now() * 1000000 - 1_000_000_000 * 60 * 60 * 24 * 30)
            ],
            canBeRemoved: false,
            device: true as unknown as any
          },
          {
            alias: "Yubikey Blue",
            isCurrent: false,
            rename: () => toast.info("rename"),
            last_usage: [
              BigInt(Date.now() * 1000000 - 1_000_000_000 * 60 * 60 * 24 * 30)
            ],
            canBeRemoved: false,
            device: true as unknown as any
          },
          {
            alias: "Yubikey Blue",
            isCurrent: false,
            rename: () => toast.info("rename"),
            last_usage: [
              BigInt(Date.now() * 1000000 - 1_000_000_000 * 60 * 60 * 24 * 30)
            ],
            canBeRemoved: false,
            device: true as unknown as any
          },
          {
            alias: "Yubikey Blue",
            isCurrent: false,
            rename: () => toast.info("rename"),
            last_usage: [
              BigInt(Date.now() * 1000000 - 1_000_000_000 * 60 * 60 * 24 * 30)
            ],
            canBeRemoved: false,
            device: true as unknown as any
          },
          {
            alias: "Yubikey Blue",
            isCurrent: false,
            rename: () => toast.info("rename"),
            last_usage: [
              BigInt(Date.now() * 1000000 - 1_000_000_000 * 60 * 60 * 24 * 30)
            ],
            canBeRemoved: false,
            device: true as unknown as any
          },
          {
            alias: "Yubikey Blue",
            isCurrent: false,
            rename: () => toast.info("rename"),
            last_usage: [
              BigInt(Date.now() * 1000000 - 1_000_000_000 * 60 * 60 * 24 * 30)
            ],
            canBeRemoved: false,
            device: true as unknown as any
          }
        ],
        recoveries: {
          recoveryPhrase: {
            isProtected: true,
            unprotect: () => toast.info("unprotect"),
            reset: () => toast.info("reset")
          }
        },
        pinAuthenticators: []
      },
      onAddDevice: () => {
        toast.info("add device requested");
      },
      onRemoveDevice: () => {
        toast.info("remove device requested");
      },
      addRecoveryPhrase: () => {
        toast.info("add recovery phrase");
      },
      addRecoveryKey: () => {
        toast.info("add recovery key");
      },
      credentials: [],
      onLinkAccount: () => {
        toast.info("link account");
      },
      onUnlinkAccount: () => {
        toast.info("unlink account");
      },
      dapps,
      exploreDapps: () => {
        toast.info("explore dapps");
      }
    });
  </script>
</Screen>
