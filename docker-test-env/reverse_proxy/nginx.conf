worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    # (a mock of) the IC's HTTP API endpoint
    server {
        listen       443 ssl;
        server_name  ic0.app;

        ssl_certificate      /etc/nginx/certs/ic0.app.crt;
        ssl_certificate_key  /etc/nginx/certs/ic0.app.key;

        location / {
            proxy_pass http://host.docker.internal:4943;
            proxy_set_header Host $http_host;

            # include details about the original request
            proxy_set_header X-Original-Host $http_host;
            proxy_set_header X-Original-Scheme $scheme;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_redirect off;
        }
    }

    # (a mock of) the official internet identity server/domain, i.e. where the webapp is served
    server {
        listen       443 ssl;
        server_name  identity.internetcomputer.org;

        ssl_certificate      /etc/nginx/certs/identity.internetcomputer.org.crt;
        ssl_certificate_key  /etc/nginx/certs/identity.internetcomputer.org.key;

        location / {
            proxy_pass http://host.docker.internal:II_PORT;
            proxy_set_header Host II_CANISTER_ID.localhost;

            # include details about the original request
            proxy_set_header X-Original-Host $http_host;
            proxy_set_header X-Original-Scheme $scheme;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_redirect off;
        }
    }

    # This makes all requests to raw return 400
    server {
        listen       443 ssl;
        server_name  "~^(.*)\.raw\.ic0\.app$";

        ssl_certificate      /etc/nginx/certs/wildcard.ic0.app.crt;
        ssl_certificate_key  /etc/nginx/certs/wildcard.ic0.app.key;

        location / {
            add_header "Access-Control-Allow-Origin" "*" always;
            return 400;
        }
    }

    server {
        listen       443 ssl;
        server_name  "~^(.*)\.ic0\.app$";

        ssl_certificate      /etc/nginx/certs/wildcard.ic0.app.crt;
        ssl_certificate_key  /etc/nginx/certs/wildcard.ic0.app.key;

        location / {
            proxy_pass http://host.docker.internal:4943;
            proxy_set_header Host $1.localhost;

            # include details about the original request
            proxy_set_header X-Original-Host $http_host;
            proxy_set_header X-Original-Scheme $scheme;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_redirect off;
        }
    }
    server {
        listen       443 ssl;
        server_name  nice-name.com;

        ssl_certificate      /etc/nginx/certs/nice-name.com.crt;
        ssl_certificate_key  /etc/nginx/certs/nice-name.com.key;

        location / {
            proxy_pass http://host.docker.internal:4943;
            proxy_set_header Host TEST_APP_CANISTER_ID.localhost;

            # include details about the original request
            proxy_set_header X-Original-Host $http_host;
            proxy_set_header X-Original-Scheme $scheme;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_redirect off;
        }
    }
    include servers/*;
}
