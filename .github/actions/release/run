#!/usr/bin/env bash
#
# This script creates a nice markdown table with the build artifacts' shas, links to download
# the Wasm modules, and links to the `sha256sum` steps in CI for verification.

set -euo pipefail

# This script sets "RELEASE_ACTION_BODY_FILE" to the path of the generated file. The script is run twice
# (once when called with 'uses: ', once in post) meaning we can differentiate the first from second run
# by reading "RELEASE_ACTION_BODY_FILE". On the "post" run, we just cleanup and exit.
if [ -n "${RELEASE_ACTION_BODY_FILE:-}" ]
then
    >&2 echo "Cleaning up body file $RELEASE_ACTION_BODY_FILE"
    if ! [ -f "$RELEASE_ACTION_BODY_FILE" ]
    then
        >&2 echo "strange, no file to remove"
    else
        rm "$RELEASE_ACTION_BODY_FILE"
    fi
    exit 0
fi

# The file where we'll progressively dump the release body content
body=$(mktemp)
>&2 echo "Using '$body' for body"

# Start the body with a paragraph and table headers

# NOTE: we link to the current release (not to master) because things might change
if [ -z "${GITHUB_REF_NAME:-}" ]
then
    >&2 echo "No github ref name set"
    rm "$body"
    exit 1
fi

cat > "$body" <<EOF
## Build flavors

For more information please see the [Build flavors](https://github.com/dfinity/internet-identity/tree/$GITHUB_REF_NAME#build-features-and-flavors) section of the README.

| Filename | sha256 | Verify |
| --- | --- | --- |
EOF

# Read all "INPUT_ASSETS" (where "ASSETS" is the input specified in action.yml)
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#example-specifying-inputs
while IFS= read -r filename
do
    if [ -z "$filename" ]; then continue; fi
    >&2 echo working on asset "$filename"

    # Find out the Job ID
    # XXX: Unfortunately GitHub actions doesn't give us a way to find out the Job ID explicitely.
    # Instead, we find the job name that includes "$filename" and assume that's the Job ID. This works
    # because our build matrix takes in the filename as argument, which is added to the job name.
    # https://github.community/t/get-action-job-id/17365/7
    job_id=$(curl --silent "https://api.github.com/repos/dfinity/internet-identity/actions/runs/$GITHUB_RUN_ID/jobs" \
        | jq -cMr \
            --arg filename "$filename" \
            '.jobs[] | select(.name | contains($filename)) | .id')
    >&2 echo "Found job id: $job_id"

    # Now get the URL that we'll link to for verification of the sha
    html_url=$(curl --silent "https://api.github.com/repos/dfinity/internet-identity/actions/runs/$GITHUB_RUN_ID/jobs" \
        | jq -cMr \
            --argjson job_id "$job_id" \
            '.jobs[] | select(.id == $job_id) | .html_url')
    >&2 echo "Found html_url: $html_url"

    # Additionally grab the step number of the 'sha256sum' step
    step=$(curl --silent "https://api.github.com/repos/dfinity/internet-identity/actions/runs/$GITHUB_RUN_ID/jobs" \
        | jq -cMr \
            --argjson job_id "$job_id" \
            '.jobs[] | select(.id == $job_id) | .steps[] | select(.name | contains("sha256sum")) | .number')
    >&2 echo "Found step: $step"

    # Prepare the cells:
    # | [filename.wasm](<download link>) | <sha256> | [CI Run](<run link>) |
    download_link="https://github.com/dfinity/internet-identity/releases/download/$GITHUB_REF_NAME/$filename"
    download="[\2]($download_link)"

    # shellcheck disable=SC2016
    sha='`\1`'

    run_link="$html_url#step:$step:1"
    run="[CI Run]($run_link)"

    # Get the shasum and capture the sha (using only POSIX sed)
    shasum -a 256 "$filename"  | sed -r "s%^([a-z0-9]+)[[:space:]][[:space:]](.*)$%|$download|$sha|$run|%" >> "$body"
done <<< "$INPUT_ASSETS"

>&2 echo "Creating release notes"

# NOTE: we create the release notes ourselves, instead of letting GitHub do it with
# 'generate_release_notes: true', here we can actually specify the release range. When doing
# it on its own, GitHub is really bad at figuring which tag to use as the previous tag (for
# listing contributions since).
# https://github.com/github/feedback/discussions/5975

previous_tag_name=$(curl \
    -H "Accept: application/vnd.github.v3+json" \
    https://api.github.com/repos/dfinity/internet-identity/releases \
    | jq -cMr 'sort_by(.published_at) | reverse | .[0] | .tag_name')
>&2 echo "Using following tag as previous: $previous_tag_name"

jq_body=$(jq -cM -n \
    --arg previous_tag_name "$previous_tag_name" \
    --arg tag_name "$GITHUB_REF_NAME" \
    '{ tag_name: $tag_name, previous_tag_name: $previous_tag_name }')

curl \
    -X POST \
    -H "authorization: token ${INPUT_TOKEN:?No token given}" \
    -H "Accept: application/vnd.github.v3+json" \
    https://api.github.com/repos/dfinity/internet-identity/releases/generate-notes \
    --data "$jq_body" \
    | jq -cMr '.body' >> "$body"

>&2 echo "body complete:"

cat "$body"

echo "::set-output name=notes-file::$body"

echo "RELEASE_ACTION_BODY_FILE=$body" >>"$GITHUB_ENV"
