name: Frontend checks and lints

on:
  push:

jobs:
  frontend-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Check formatting
        run: npm run format-check

  # Job that starts the showcase and takes a screenshot of every page
  screenshots:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        device: [ 'desktop', 'mobile' ]
      # Make sure that one failing test does not cancel all other matrix jobs
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - name: Install pinned chrome version
        run: |
          curl -sSL "https://www.googleapis.com/download/storage/v1/b/chromium-browser-snapshots/o/Linux_x64%2F1047731%2Fchrome-linux.zip?generation=1663284576100523&alt=media" -o chrome-linux.zip
          unzip "chrome-linux.zip"
          ls -la chrome-linux
          ./chrome-linux/chrome --version
      - name: Print chrome version
        run: |
          echo "google-chrome --version"
          google-chrome --version
      - run: rm -v -f screenshots/${{ matrix.device }}*.png
      - run: npm ci
      - run: |
          npm run showcase&
          showcase_pid=$!

          # every 100ms, check if localhost:8080 is reachable (i.e. devserver is up)
          while ! nc -z localhost 8080; do
            sleep 0.1
          done
          SCREENSHOTS_DIR="./screenshots/${{ matrix.device }}" \
            SCREENSHOTS_TYPE=${{ matrix.device }} \
            CHROME_BINARY=./chrome-linux/chrome \
            npm run screenshots
          kill "$showcase_pid"

      - run: |
          echo "The following screenshots were created:"
          shasum -a 256 screenshots/${{ matrix.device }}/*.png | sort -k2 # sort by 2nd column (filename)

      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        with:
          name: e2e-screenshots-${{ matrix.device }}
          path: screenshots/${{ matrix.device }}/*.png

      - name: Archive test logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: wdio-log-${{ matrix.device }}
          path: ./*.log

  # This uploads the screenshots from both 'desktop' and 'mobile'
  upload-screenshots:
    runs-on: ubuntu-latest

    # don't upload screenshots on screenshot auto-update commits (to avoid screenshot-pushing
    # loops), don't upload screenshots to main, and don't upload screenshots on release.
    #if: ${{ ! contains(github.event.head_commit.message,'Selenium screenshots auto-update') && github.ref != 'refs/heads/main' && ! startsWith(github.ref, 'refs/tags/release-') }}
    # temporarily disable screenshot upload due to flaky and buggy behaviour, see https://github.com/dfinity/internet-identity/pull/1085
    if: false

    needs: screenshots

    steps:
      - uses: actions/checkout@v3
        with:
          # set a PAT so that add-and-commit can trigger CI runs
          token: ${{ secrets.GIX_BOT_PAT }}

      # Make sure old screenshots don't pollute the commit
      - run: rm -v -f screenshots/*.png

      # Download the desktop screenshots artifacts
      - uses: actions/download-artifact@v3
        with:
          name: e2e-screenshots-desktop
          path: screenshots/desktop

      # Download the mobile screenshots artifacts
      - uses: actions/download-artifact@v3
        with:
          name: e2e-screenshots-mobile
          path: screenshots/mobile

      - run: |
          echo "The following screenshots were recovered:"
          shasum -a 256 screenshots/*/*.png | sort -k2 # sort by 2nd column (filename)

      - name: "Revert screenshot changes smaller than 8 pixels and less"
        run: |
          for modified in $(git ls-files --modified ./screenshots/*/*.png)
          do
            echo found modified screenshot "$modified"
            if [ ! -f "$modified" ]; then
              # if the file cannot be found then git is probably just telling us that it was deleted.
              # in that case we do _not_ revert the file and skip checking for its size.
              echo "'$modified' not found, assuming it was deleted"
              continue
            fi
            old=$(mktemp)
            git show HEAD:$modified > $old
            magick_out=$(mktemp)
            metric=0
            # The 'AE' metric counts the number of pixels that differ between the two images
            # (we set /dev/null as the "diff" output image)
            # NOTE: imagemagick prints the value to stderr
            if ! compare -metric AE "$modified" "$old" /dev/null 2> "$magick_out"
            then
              metric=$(<"$magick_out")
              printf -v metric "%.f" "$metric"
              echo "Magick AE is: '$metric'"
            fi

            rm "$magick_out"; rm "$old"

            # Ensure that we got a meaningful output
            if ! [[ $metric =~ ^[0-9]+$ ]]
            then
              echo "Magick didn't return a number: $metric"
              exit 1
            fi

            if (( metric <= 100 ))
            then
              echo "Pixel difference ($metric) is too small, reverting"
              git checkout HEAD -- "$modified"
            fi
          done

      - name: Commit screenshots
        uses: EndBug/add-and-commit@v9
        with:
          add: screenshots
          default_author: github_actions
          message: "ðŸ¤– Selenium screenshots auto-update"
