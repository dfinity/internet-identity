# This describes all the tests we run on the canister code (various builds,
# haskell tests, selenium tests). The canister code is built in docker and the
# wasm is then reused by subsequent build steps. We build various flavors of
# the code, see `docker-build-...` for more info.
name: Canister tests

on:
  push:

jobs:

  #####################
  # The docker builds #
  #####################

  # The image shared by all builds, containing pre-built rust deps
  docker-build-base:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # We use buildx and its GitHub Actions caching support `type=gha`. For
      # more information, see
      # https://github.com/docker/build-push-action/issues/539
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Build base Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          cache-from: type=gha,scope=cached-stage
          cache-to: type=gha,scope=cached-stage,mode=max
          outputs: type=cacheonly
          target: deps

  docker-build-ii:
    runs-on: ubuntu-latest
    needs: docker-build-base
    strategy:
      # NOTE: the 'name' in the matrix should match the asset filename, because it is used in
      # .github/actions/release to figure out the job ID.
      #
      # NOTE: if you modify the flavors, update the #flavors table in README.md
      matrix:
        include:
          # The production build
          - name: internet_identity_production.wasm
            II_FETCH_ROOT_KEY: 0
            II_DUMMY_CAPTCHA: 0
            II_DUMMY_AUTH: 0
            II_INSECURE_REQUESTS: 0

          # No captcha and fetching the root key, used in (our) tests, backend and
          # selenium.
          - name: internet_identity_test.wasm
            II_FETCH_ROOT_KEY: 1
            II_DUMMY_CAPTCHA: 1
            II_DUMMY_AUTH: 0
            II_INSECURE_REQUESTS: 0

          # Everything disabled, used by third party developers who only care
          # about the login flow
          - name: internet_identity_dev.wasm
            II_FETCH_ROOT_KEY: 1
            II_DUMMY_CAPTCHA: 1
            II_DUMMY_AUTH: 1
            II_INSECURE_REQUESTS: 1

    steps:
      - uses: actions/checkout@v3

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Build ${{ matrix.name }}
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          build-args: |
            II_FETCH_ROOT_KEY=${{ matrix.II_FETCH_ROOT_KEY }}
            II_DUMMY_AUTH=${{ matrix.II_DUMMY_AUTH }}
            II_DUMMY_CAPTCHA=${{ matrix.II_DUMMY_CAPTCHA }}
            II_INSECURE_REQUESTS=${{ matrix.II_INSECURE_REQUESTS }}
          cache-from: type=gha,scope=cached-stage
          # Exports the artefacts from the final stage
          outputs: ./out
          target: scratch_internet_identity

      - run: sha256sum out/internet_identity.wasm
      - run: mv out/internet_identity.wasm ${{ matrix.name }}
      - name: 'Upload ${{ matrix.name }}'
        uses: actions/upload-artifact@v3
        with:
          # name is the name used to display and retrieve the artifact
          name: ${{ matrix.name }}
          # path is the name used as the file to upload and the name of the
          # downloaded file
          path: ${{ matrix.name }}

  docker-build-archive:
    runs-on: ubuntu-latest
    needs: docker-build-base
    steps:
      - uses: actions/checkout@v3

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Archive Canister
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          cache-from: type=gha,scope=cached-stage
          # Exports the artefacts from the final stage
          outputs: ./out
          target: scratch_archive

      - run: mv out/archive.wasm archive.wasm
      - run: sha256sum archive.wasm
      - name: 'Upload archive.wasm'
        uses: actions/upload-artifact@v3
        with:
          # name is the name used to display and retrieve the artifact
          name: archive.wasm
          # path is the name used as the file to upload and the name of the
          # downloaded file
          path: archive.wasm

  wasm-size:
    runs-on: ubuntu-latest
    needs: docker-build-ii
    steps:
      - uses: actions/checkout@v3
      - name: 'Download wasm'
        uses: actions/download-artifact@v3
        with:
          name: internet_identity_production.wasm
          path: .
      - id: record-size
        uses: ./.github/actions/file-size
        with:
          file: internet_identity_production.wasm
          save: ${{ github.ref == 'refs/heads/main' }}
      - name: "Check canister size"
        run: |
          max_size=3670016 # maximum canister size, in bytes
          actual_size=${{ steps.record-size.outputs.size }}
          if (( actual_size > max_size ))
          then
            echo "Canister size too big"
            echo "($actual_size > $max_size)"
            exit 1
          fi

  test-app-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            demos/test-app/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('demos/test-app/Cargo.lock', 'rust-toolchain.toml') }}
      - uses: ./.github/actions/bootstrap
      - uses: ./.github/actions/setup-node
      - name: "Build test app canister"
        working-directory: demos/test-app
        run: ./build.sh
      - name: 'Upload test app'
        uses: actions/upload-artifact@v3
        with:
          # name is the name used to display and retrieve the artifact
          name: test_app.wasm
          # path is the name used as the file to upload and the name of the
          # downloaded file
          path: ./demos/test-app/test_app.wasm

  ###########################
  # The Rust canister tests #
  ###########################

  # Run the tests, user the output of the docker build as Wasm module
  # (note: this runs _all_ cargo tests)
  canister-tests:
    runs-on: ${{ matrix.os }}
    needs: [docker-build-ii, docker-build-archive]
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v3
        with:
          # Pull a deep copy so that we can set meaningful timestamps across builds, based on the commit history
          fetch-depth: '0'

      # Figure out which commit modified what. Each commit defined here is used as a cache layer.
      # We use those commit shas as cache keys. Since cargo uses timestamp-based comparison,
      # each cache layer is retrieved and timestamped when the particular commit is checked out,
      # so that checking out a later commit tells cargo which files are newer (since git will
      # update the mtime of newer files)
      - name: Retrieve commit information
        id: git_info
        run: |
          # Last time dependencies or toolchain were updated; used for ~/.cargo and dependencies
          commit_deps=$(git log -1 --pretty=format:%H -- Cargo.* src/*/Cargo.toml rust-toolchain.toml)
          echo "::set-output name=commit_deps::$commit_deps"
          echo "deps: $commit_deps"

          # Last time the canister code was modified
          commit_canister=$(git log -1 --pretty=format:%H -- 'src/**' ':^src/frontend')
          echo "::set-output name=commit_canister::$commit_canister"
          echo "canister: $commit_canister"

          # This commit
          commit_now=$(git log -1 --pretty=format:%H)
          echo "::set-output name=commit_now::$commit_now"
          echo "now: $commit_now"

      - uses: ./.github/actions/bootstrap

      # Rustup only installs cargo on the first call, so we use a dedicated step to get a good idea of how
      # time is spent in each step separately
      - run: cargo check --help

      - name: Create dummy assets
        run: |
          mkdir dist
          touch dist/index.html
          touch dist/index.js.gz
          touch dist/index.css
          touch dist/loader.webp
          touch dist/favicon.ico
          touch dist/ic-badge.svg

      # Caching ~/.cargo

      # At every step (cargo cache, deps, etc) we store the cache content to a temporary
      # directory so that the cache is kept as it was right after the layer build until
      # the actions/cache post step is run (which only then uploads the cache)
      - uses: actions/cache@v3
        id: cache-dot-cargo
        with:
          path: /tmp/dot-cargo
          key: ${{ runner.os }}-${{ steps.git_info.outputs.commit_deps }}-dot-cargo

      - run: git checkout ${{ steps.git_info.outputs.commit_deps }}

      - name: Cargo cache (recovery)
        if: steps.cache-dot-cargo.outputs.cache-hit == 'true'
        run: |
          rsync -av "/tmp/dot-cargo/" "$HOME/.cargo/"
          find "$HOME/.cargo/" -exec touch -t "$(date +%Y%m%d%H%M.%S)" {} +

      - name: Cargo cache (build)
        run: cargo fetch --locked

      - name: Cargo cache (save to cache)
        if: steps.cache-dot-cargo.outputs.cache-hit != 'true'
        run: rsync -av "$HOME/.cargo/" "/tmp/dot-cargo/"

      # Caching external dependencies

      - uses: actions/cache@v3
        id: cache-deps
        with:
          path: /tmp/target-deps
          key: ${{ runner.os }}-${{ steps.git_info.outputs.commit_deps }}-deps

      - name: Dependencies (recovery)
        if: steps.cache-deps.outputs.cache-hit == 'true'
        run: |
          rsync -av "/tmp/target-deps/" "$PWD/target/"
          mtime=$(date +%Y%m%d%H%M.%S)
          find ./target -exec touch -t "$mtime" {} +
          # Here we touch the cache itself so that when diffing (with --compare-dest)
          # rsync knows what is _newer_ than what we've restored here
          find "/tmp/target-deps/" -exec touch -t "$mtime" {} +

      - name: Dependencies (build)
        run: cargo build --tests --release --frozen

      - name: Dependencies (save to cache)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: rsync -av "$PWD/target/" "/tmp/target-deps/"

      # Caching canister code and tests

      - uses: actions/cache@v3
        id: cache-canister
        with:
          path: /tmp/target-canister
          key: ${{ runner.os }}-${{ steps.git_info.outputs.commit_canister }}-canister

      - run: git checkout ${{ steps.git_info.outputs.commit_canister }}

      - name: Canister code (recover)
        if: steps.cache-canister.outputs.cache-hit == 'true'
        run: |
          # Set timestamps so that --compare-dest below knows what (not) to save
          find /tmp/target-canister -exec touch -t "$(date +%Y%m%d%H%M.%S)" {} +
          rsync -av /tmp/target-canister/ "$PWD/target/"

      - name: Canister code (build)
        run: cargo build --tests --release --frozen

      - name: Canister code (save to cache)
        if: steps.cache-canister.outputs.cache-hit != 'true'
        # Here we only store what's been built since the dependency cache restore. Saving the whole
        # ./target again would take another ~800MB (compressed) whereas the diff only takes ~20MB.
        run: rsync -av --compare-dest="/tmp/target-deps/" "$PWD/target/" "/tmp/target-canister/"

      # Build the tests
      - name: Build
        run: |
          git checkout ${{ steps.git_info.outputs.commit_now }}
          cargo build --tests --release --frozen

      - name: 'Download II wasm'
        uses: actions/download-artifact@v3
        with:
          name: internet_identity_test.wasm
          path: .

      - name: 'Download archive wasm'
        uses: actions/download-artifact@v3
        with:
          name: archive.wasm
          path: .

      - name: Run Tests
        run: |
          mv internet_identity_test.wasm internet_identity.wasm
          # NOTE: Here we download a changing asset (i.e. the latest release) meaning that in some rare cases (after a new release)
          # PRs that used to be green may become red (if the new release broke something). While this is not CI best practice, it's
          # a relatively small price to pay to make sure PRs are always tested against the latest release.
          curl -sSL https://github.com/dfinity/internet-identity/releases/latest/download/internet_identity_test.wasm -o internet_identity_previous.wasm
          cargo test --release
        env:
          RUST_BACKTRACE: 1

  ######################
  # The selenium tests #
  ######################

  selenium:
    runs-on: ubuntu-latest
    needs: [docker-build-ii, test-app-build]
    strategy:
      matrix:
        device: [ 'desktop', 'mobile' ]
        # Specify some shards for jest (a jest instance will only run a subset of files
        # based on the shard assigned to it)
        # The jest parameter is actually 1/N, 2/N etc but we use a artifact-friendly
        # version here (with underscore).
        shard: [ '1_3', '2_3', '3_3' ]
      # Make sure that one failing test does not cancel all other matrix jobs
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node

      - uses: ./.github/actions/setup-dfx

      # Helps with debugging
      - name: Show versions
        run: |
          echo dfx --version
          dfx --version
          echo node --version
          node --version
          echo docker --version
          docker --version

      - name: 'Run dfx'
        run: dfx start --background

      - name: 'Download II wasm'
        uses: actions/download-artifact@v3
        with:
          name: internet_identity_test.wasm
          path: .

      - name: 'Download test app wasm'
        uses: actions/download-artifact@v3
        with:
          name: test_app.wasm
          path: demos/test-app

      - name: Deploy Internet Identity
        run: |
          dfx canister create --all
          dfx canister install internet_identity --wasm internet_identity_test.wasm

      - name: Deploy test app
        working-directory: demos/test-app
        run: |
          dfx canister create --all
          dfx canister install test_app --wasm test_app.wasm

      - name: Start docker compose
        run: scripts/start-selenium-env --no-hot-reload

      - run: npm ci
      - run: npm test
      - run: "SCREEN=${{ matrix.device }} npm run test:e2e -- --shard=$(tr <<<'${{ matrix.shard }}' -s _ /)" # replace 1_N with 1/N
      - name: Collect docker logs
        working-directory: docker-test-env
        if: ${{ always() }}
        run: docker compose logs > ../docker-compose.log

      - name: Stop dfx
        run: dfx stop

      - name: Shut down docker services
        working-directory: docker-test-env
        run: docker compose down

      - name: Archive test logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-log-${{ matrix.device }}-${{ matrix.shard }}
          path: ./*.log

      - name: Archive test failures
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-failures-${{ matrix.device }}-${{ matrix.shard }}
          path: test-failures/*
          if-no-files-found: ignore

  using-dev-build:
    runs-on: ubuntu-latest
    needs: docker-build-ii
    steps:
      - uses: actions/checkout@v3

      - run: |
          sudo apt-get update
          sudo apt-get --only-upgrade install google-chrome-stable
          google-chrome --version

      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/setup-dfx

      # Helps with debugging
      - name: Show versions
        run: |
          echo dfx --version
          dfx --version

      - name: Start replica
        run: |
          dfx start --background

      - name: 'Download wasm'
        uses: actions/download-artifact@v3
        with:
          name: internet_identity_dev.wasm
          path: .

      - name: Deploy II and run tests
        run: |
          set -euo pipefail

          # Copy example to make sure it does not rely on living inside the II repo
          builddir=$(mktemp -d)
          cp -r ./demos/using-dev-build/. "$builddir"
          pushd "$builddir"

          # Install npm deps
          npm ci

          # Create a fake curl so that we use this build's wasm and did files; also create "witness"
          # files to make sure the fake curl was run (rm $witness_foo will fail otherwise)
          witnesses=$(mktemp -d); witness_wasm="$witnesses/wasm"; witness_did="$witnesses/did"
          curl_dir=$(mktemp -d)

          cat > "$curl_dir/curl" << EOF
          #!/usr/bin/env bash
          case "\$*" in
            *"internet_identity.wasm"*)
              cp "$GITHUB_WORKSPACE"/internet_identity_dev.wasm ./internet_identity.wasm && touch $witness_wasm
              ;;
            *"internet_identity.did"*)
              cp "$GITHUB_WORKSPACE"/src/internet_identity/internet_identity.did ./internet_identity.did && touch $witness_did
              ;;
            *)
              echo "unexpected arguments: \$*"
              exit 1
              ;;
          esac
          EOF

          chmod +x $curl_dir/curl
          PATH=$curl_dir:$PATH dfx deploy --no-wallet --argument '(null)'
          rm -rf "$curl_dir"; rm "$witness_wasm"; rm "$witness_did"; rmdir "$witnesses"

          npm run test

          # Clean up temp files
          rm internet_identity.wasm; rm internet_identity.did
          popd
          rm -rf "$builddir"

      - name: Stop replica
        run: |
          dfx stop

  # This deploys the production build to mainnet, to a canister that we use for release testing.
  deploy:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/release-')
    needs: docker-build-ii
    steps:
      - uses: actions/checkout@v3

      - name: 'Install dfx'
        run: DFX_VERSION=0.10.1 sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"

      - name: 'Download wasm'
        uses: actions/download-artifact@v3
        with:
          name: internet_identity_production.wasm
          path: .

      - name: 'Install key'
        env:
          DFX_DEPLOY_KEY: ${{ secrets.DFX_DEPLOY_KEY }}
        run: |
          key_pem=$(mktemp)
          printenv "DFX_DEPLOY_KEY" > "$key_pem"
          dfx identity import --disable-encryption --force default "$key_pem"
          rm "$key_pem"

      - name: "Deploy"
        run: |
          mv internet_identity_production.wasm internet_identity.wasm
          wallet="cvthj-wyaaa-aaaad-aaaaq-cai"
          dfx canister --network ic --wallet "$wallet" install --mode upgrade \
            --argument '(null)' \
            internet_identity


  # This ... releases
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/release-')
    needs: docker-build-ii

    steps:
      - uses: actions/checkout@v3

      - name: 'Download wasm'
        uses: actions/download-artifact@v3
        with:
          name: internet_identity_test.wasm
          path: .

      - name: 'Download wasm'
        uses: actions/download-artifact@v3
        with:
          name: internet_identity_dev.wasm
          path: .

      - name: 'Download wasm'
        uses: actions/download-artifact@v3
        with:
          name: internet_identity_production.wasm
          path: .

      - name: Prepare release
        uses: ./.github/actions/release
        id: prepare-release
        with:
          assets: |
            internet_identity_production.wasm
            internet_identity_dev.wasm
            internet_identity_test.wasm
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish release
        run: |
          ./scripts/release \
            --tag ${{ github.ref }} \
            --notes-file ${{ steps.prepare-release.outputs.notes-file }} \
            -- \
            internet_identity_production.wasm \
            internet_identity_dev.wasm \
            internet_identity_test.wasm \
            src/internet_identity/internet_identity.did
        env:
          # populated by GitHub Actions
          # https://docs.github.com/en/actions/security-guides/automatic-token-authentication#using-the-github_token-in-a-workflow
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  clean-build:
    runs-on: ${{ matrix.os }}
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: docker-build-ii
    strategy:
      matrix:
        os: [ ubuntu-22.04, ubuntu-20.04, ubuntu-18.04, macos-11, macos-12 ]
    steps:
      - uses: actions/checkout@v3
      - name: 'Download wasm'
        uses: actions/download-artifact@v3
        with:
          name: internet_identity_production.wasm
          path: .
      - run: |
          sha256=$(shasum -a 256 ./internet_identity_production.wasm | cut -d ' ' -f1)
          echo "::set-output name=sha256::$sha256"
        id: sha256

      - uses: ./.github/actions/check-build
        with:
          # we check that ubuntu builds match the docker build
          sha256: ${{ startsWith(matrix.os, 'ubuntu') && steps.sha256.outputs.sha256 || '' }}
