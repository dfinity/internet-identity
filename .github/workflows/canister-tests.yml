# This describes all the tests we run on the canister code (various builds,
# haskell tests, selenium tests). The canister code is built in docker and the
# wasm is then reused by subsequent build steps. We build various flavors of
# the code, see `docker-build-...` for more info.
name: Canister tests

on:
  push:

jobs:

  #####################
  # The docker builds #
  #####################

  # The image shared by all builds, containing pre-built rust deps
  docker-build-base:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # We use buildx and its GitHub Actions caching support `type=gha`. For
      # more information, see
      # https://github.com/docker/build-push-action/issues/539
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Build base Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          cache-from: type=gha,scope=cached-stage
          cache-to: type=gha,scope=cached-stage,mode=max
          outputs: type=cacheonly
          target: deps

  docker-build:
    runs-on: ubuntu-latest
    needs: docker-build-base
    strategy:
      # NOTE: the 'name' in the matrix should match the asset filename, because it is used in
      # .github/actions/release to figure out the job ID.
      #
      # NOTE: if you modify the flavors, update the #flavors table in README.md
      matrix:
        include:
          # The production build
          - name: internet_identity_production.wasm
            II_FETCH_ROOT_KEY: 0
            II_DUMMY_CAPTCHA: 0
            II_DUMMY_AUTH: 0

          # No captcha and fetching the root key, used in (our) tests, backend and
          # selenium.
          - name: internet_identity_test.wasm
            II_FETCH_ROOT_KEY: 1
            II_DUMMY_CAPTCHA: 1
            II_DUMMY_AUTH: 0

          # Everything disabled, used by third party developers who only care
          # about the login flow
          - name: internet_identity_dev.wasm
            II_FETCH_ROOT_KEY: 1
            II_DUMMY_CAPTCHA: 1
            II_DUMMY_AUTH: 1

    steps:
      - uses: actions/checkout@v2

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Build ${{ matrix.name }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          build-args: |
            II_FETCH_ROOT_KEY=${{ matrix.II_FETCH_ROOT_KEY }}
            II_DUMMY_AUTH=${{ matrix.II_DUMMY_AUTH }}
            II_DUMMY_CAPTCHA=${{ matrix.II_DUMMY_CAPTCHA }}
          cache-from: type=gha,scope=cached-stage
          # Exports the artefacts from the final stage
          outputs: ./out

      - run: sha256sum out/internet_identity.wasm
      - run: mv out/internet_identity.wasm ${{ matrix.name }}
      - name: 'Upload ${{ matrix.name }}'
        uses: actions/upload-artifact@v2
        with:
          # name is the name used to display and retrieve the artifact
          name: ${{ matrix.name }}
          # path is the name used as the file to upload and the name of the
          # downloaded file
          path: ${{ matrix.name }}

  wasm-size:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - uses: actions/checkout@v2
      - name: 'Download wasm'
        uses: actions/download-artifact@v2
        with:
          name: internet_identity_production.wasm
          path: .
      - id: record-size
        uses: ./.github/actions/file-size
        with:
          file: internet_identity_production.wasm
          save: ${{ github.ref == 'refs/heads/main' }}
      - name: "Check canister size"
        run: |
          max_size=3670016 # maximum canister size, in bytes
          actual_size=${{ steps.record-size.outputs.size }}
          if (( actual_size > max_size ))
          then
            echo "Canister size too big"
            echo "($actual_size > $max_size)"
            exit 1
          fi

  ###########################
  # The Rust canister tests #
  ###########################

  # Run the tests, user the output of the docker build as Wasm module
  # (note: this runs _all_ cargo tests)
  canister-tests:
    runs-on: ${{ matrix.os }}
    needs:
      - docker-build
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    env:
      RUSTC_VERSION: 1.58.1
    steps:
      - uses: actions/checkout@v2

        # NOTE: the top-level crate "canister_tests" still gets recompiled (~4mn)
        # due to the mtime changing on the checkout. Can be worked around by storing
        # the original mtime in the cache and by hashing all of src/canister_tests
        # (and then restoring the mtime).
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ env.RUSTC_VERSION }}-${{ hashFiles('**/Cargo.lock') }}-tests-1

      - name: Install Rust
        run: |
          rustup update "$RUSTC_VERSION" --no-self-update
          rustup default "$RUSTC_VERSION"
          rustup target add wasm32-unknown-unknown

      - name: Create fake assets
        run : |
          mkdir dist
          touch dist/index.html
          touch dist/index.js
          touch dist/index.js.gz
          touch dist/loader.webp
          touch dist/favicon.ico
          touch dist/ic-badge.svg

      - name: 'Download wasm'
        uses: actions/download-artifact@v2
        with:
          name: internet_identity_test.wasm
          path: .

      - name: Run Tests
        shell: bash
        run: |
          mv internet_identity_test.wasm internet_identity.wasm
          # NOTE: Here we download a changing asset (i.e. the latest release) meaning that in some rare cases (after a new release)
          # PRs that used to be green may become red (if the new release broke something). While this is not CI best practice, it's
          # a relatively small price to pay to make sure PRs are always tested against the latest release.
          curl -sSL https://github.com/dfinity/internet-identity/releases/latest/download/internet_identity_test.wasm -o internet_identity_previous.wasm
          # the "rand" features are needed for the captcha crate to compile
          cargo test --release --all-targets --features 'rand/std,rand/std_rng'
        env:
          RUST_BACKTRACE: 1

  #####################
  # The backend tests #
  #####################

  backend:
    runs-on: ${{ matrix.os }}
    needs: docker-build
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    env:
      GHC_VERSION: 8.8.4

    steps:
      - uses: actions/checkout@v2

      - name: Cache ~/.cabal/store
        uses: actions/cache@v2
        with:
          path: |
            ~/.cabal/store
          key: cabal-${{ runner.os }}-${{ env.GHC_VERSION }}-${{ hashFiles('backend-tests/cabal.project', 'backend-tests//cabal.project.freeze') }}
          restore-keys: cabal-${{ runner.os }}-${{ env.GHC_VERSION }}-

      - uses: actions/setup-haskell@v1.1.3
        with:
          ghc-version: ${{ env.GHC_VERSION }}
          cabal-version: "3.2"

      - name: Build test runner
        working-directory: backend-tests
        run: |
          cabal update
          # we cannot use `cabal install` because the build is performed in
          # another directory which breaks the relative path used in
          # backend-tests.hs to internet_identity.did
          cabal build --with-ghc ghc-${{ env.GHC_VERSION }}

      - name: 'Download wasm'
        uses: actions/download-artifact@v2
        with:
          name: internet_identity_test.wasm
          path: .

      - name: Run Tests
        shell: bash
        working-directory: backend-tests
        run: mv ../internet_identity_test.wasm ../internet_identity.wasm && cabal run

  ######################
  # The selenium tests #
  ######################

  selenium:
    runs-on: ubuntu-latest
    needs: docker-build
    strategy:
      matrix:
        start-flag: [ '', '--emulator' ]
        device: [ 'desktop', 'mobile' ]
      # Make sure that one failing test does not cancel all other matrix jobs
      fail-fast: false
    env:
      DFX_VERSION: 0.8.3
      REPLICA_URL: https://ic0.app
      II_ORIGIN: https://identity.ic0.app

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: 16.x

      # This step hangs on Github actions on Darwin for some reason, that
      # is why we run this only on Linux for now
      - name: Install DFX
        run: |
          echo Install DFX Version: "$DFX_VERSION"
          yes | sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"

      # Helps with debugging
      - name: Show versions
        run: |
          echo dfx --version
          dfx --version
          echo node --version
          node --version
          echo docker --version
          docker --version

      # needed so that we can run the test on identity.ic0.app
      - name: Add hosts to /etc/hosts
        run: |
          sudo echo "127.0.0.1 identity.ic0.app" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 ic0.app" | sudo tee -a /etc/hosts

      - run: docker build reverse_proxy -t ii_proxy
      - run: docker run --add-host host.docker.internal:host-gateway -d -p 443:443 ii_proxy
      - run: dfx start ${{ matrix.start-flag }} --background

      - name: 'Download wasm'
        uses: actions/download-artifact@v2
        with:
          name: internet_identity_test.wasm
          path: .

      - name: Deploy Internet Identity
        run: |
          mv internet_identity_test.wasm internet_identity.wasm
          dfx canister --no-wallet create --all
          dfx canister --no-wallet install internet_identity --argument '(null)'

      - name: Deploy whoami canister
        run: cd demos/using-dev-build && dfx deploy whoami --no-wallet

      - name: Run demo app
        working-directory: demos/selenium-test-app
        run: |
          npm ci
          npm run build
          npm run develop --no-live-reload --no-devtool &
          sleep 10 # crude

      - name: install selenium webdrivers
        run: |
          npm ci
          npm run install-webdrivers

      - run: rm -v -f screenshots/*.png
      - run: npm test
      - run: npm run test:e2e-${{ matrix.device }}
      - run: dfx stop

      - name: Print docker logs
        if: ${{ always() }}
        run: docker logs $(docker ps -qf "ancestor=ii_proxy")

      - name: Archive test logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: e2e-test-log-${{ matrix.device }} ${{ matrix.start-flag }}
          path: wdio.log

      - run: |
          echo "The following screenshots were created:"
          shasum -a 256 screenshots/*.png | sort -k2 # sort by 2nd column (filename)

      - name: Archive screenshots
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: e2e-screenshots-${{ matrix.device }} ${{ matrix.start-flag }}
          path: screenshots/**/*.png

  using-dev-build:
    runs-on: ubuntu-latest
    needs: docker-build
    env:
      DFX_VERSION: 0.8.3
    steps:
      - uses: actions/checkout@v2

      - run: |
          sudo apt-get update
          sudo apt-get --only-upgrade install google-chrome-stable
          google-chrome --version

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          # must use 16.x because 14.x doesn't understand how to pull repos
          # using https (for dfx-proxy)
          node-version: 16.x

      - name: Install DFX
        run: |
          echo Install DFX Version: "$DFX_VERSION"
          yes | sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"

      # Helps with debugging
      - name: Show versions
        run: |
          echo dfx --version
          dfx --version

      - name: Start replica
        run: |
          dfx start --background

      - name: 'Download wasm'
        uses: actions/download-artifact@v2
        with:
          name: internet_identity_dev.wasm
          path: .

      - name: Deploy II and run tests
        working-directory: demos/using-dev-build
        run: |
          set -euo pipefail

          npm ci

          # Create a fake curl so that we use this build's wasm; also create a "witness"
          # file to make sure the fake curl was run (rm $witness will fail otherwise)
          curl_dir=$(mktemp -d); witness=$(mktemp)
          cat > "$curl_dir/curl" << EOF
          #!/usr/bin/env bash
          cp ../../internet_identity_dev.wasm ./internet_identity.wasm && touch $witness
          EOF

          chmod +x $curl_dir/curl
          PATH=$curl_dir:$PATH dfx deploy --no-wallet --argument '(null)' && rm -rf "$curl_dir" && rm $witness

          npm run test

          # Clean up our download
          rm internet_identity.wasm
      - name: Stop replica
        run: |
          dfx stop

  # This uploads the screenshots from both the (non-emulated) 'desktop' and
  # 'mobile' runs.
  upload-screenshots:
    runs-on: ubuntu-latest

    # Run after all the tests completed succesfully (and have uploaded their
    # artifacts)
    needs: selenium

    # We don't want to commit new screenshots to main
    if: ${{ github.ref != 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v2

      # Make sure old screenshots don't pollute the commit
      - run: rm -v -f screenshots/*.png

      # Download the desktop screenshots artifacts
      - uses: actions/download-artifact@v2
        with:
          name: e2e-screenshots-desktop
          path: screenshots

      # Download the mobile screenshots artifacts
      - uses: actions/download-artifact@v2
        with:
          name: e2e-screenshots-mobile
          path: screenshots

      - run: |
          echo "The following screenshots were recovered:"
          shasum -a 256 screenshots/*.png | sort -k2 # sort by 2nd column (filename)

      - name: "Revert screenshot changes smaller than 8 pixels and less"
        run: |
          for modified in $(git ls-files --modified ./screenshots)
          do
            echo found modified screenshot "$modified"
            old=$(mktemp)
            git show HEAD:$modified > $old
            magick_out=$(mktemp)
            metric=0
            # The 'AE' metric counts the number of pixels that differ between the two images
            # (we set /dev/null as the "diff" output image)
            # NOTE: imagemagick prints the value to stderr
            if ! compare -metric AE "$modified" "$old" /dev/null 2> "$magick_out"
            then
              metric=$(<"$magick_out")
              echo "Magick AE is: '$metric'"
            fi

            rm "$magick_out"; rm "$old"

            # Ensure that we got a meaningful output
            if ! [[ $metric =~ ^[0-9]+$ ]]
            then
              echo "Magick didn't return a number: $metric"
              exit 1
            fi

            if (( metric <= 8 ))
            then
              echo "Pixel difference ($metric) is too small, reverting"
              git checkout HEAD -- "$modified"
            fi
          done

      - name: Commit screenshots
        uses: EndBug/add-and-commit@v9
        with:
          add: screenshots
          default_author: github_actions
          message: "🤖 Selenium screenshots auto-update"

  # This ... releases
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/release-')
    needs: docker-build

    steps:
      - uses: actions/checkout@v2

      - name: 'Download wasm'
        uses: actions/download-artifact@v2
        with:
          name: internet_identity_test.wasm
          path: .

      - name: 'Download wasm'
        uses: actions/download-artifact@v2
        with:
          name: internet_identity_dev.wasm
          path: .

      - name: 'Download wasm'
        uses: actions/download-artifact@v2
        with:
          name: internet_identity_production.wasm
          path: .

      - name: Prepare release
        uses: ./.github/actions/release
        id: prepare-release
        with:
          assets: |
            internet_identity_production.wasm
            internet_identity_dev.wasm
            internet_identity_test.wasm
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish release
        run: |
          ./scripts/release \
            --tag ${{ github.ref }} \
            --notes-file ${{ steps.prepare-release.outputs.notes-file }} \
            -- \
            internet_identity_production.wasm \
            internet_identity_dev.wasm \
            internet_identity_test.wasm
        env:
          # populated by GitHub Actions
          # https://docs.github.com/en/actions/security-guides/automatic-token-authentication#using-the-github_token-in-a-workflow
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  clean-build:
    runs-on: ${{ matrix.os }}
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: docker-build
    strategy:
      matrix:
        os: [ ubuntu-22.04, ubuntu-20.04, ubuntu-18.04, macos-10.15, macos-11, macos-12 ]
    steps:
      - uses: actions/checkout@v2
      - name: 'Download wasm'
        uses: actions/download-artifact@v2
        with:
          name: internet_identity_production.wasm
          path: .
      - run: |
          sha256=$(shasum -a 256 ./internet_identity_production.wasm | cut -d ' ' -f1)
          echo "::set-output name=sha256::$sha256"
        id: sha256

      - uses: ./.github/actions/check-build
        with:
          # we check that ubuntu builds match the docker build
          sha256: ${{ startsWith(matrix.os, 'ubuntu') && steps.sha256.outputs.sha256 || '' }}
          rust-version: 1.58.1
          ic-cdk-optimizer-version: 0.3.1
