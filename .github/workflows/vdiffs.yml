name: TODO

on:
  push:
    # TODO: pull_request & workflow_run
    # TODO: delete branches on PR close

jobs:
  vdiffs:
    concurrency:
      group: vdiffs-${{ github.ref_name || github.run_id }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - run: echo hello world
      - name: "Find PR"
        id: "pr"
        uses: actions/github-script@v5
        with:
          script: |
            const refName = process.env.GITHUB_REF_NAME;
            if(!refName) {
              const msg = "No ref for run, aborting";
              console.error(msg);
              throw new Error(msg);
            }
            console.log("Looking for PR for", refName);
            const res = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: "dfinity:" + refName,
            })
            console.log(res);
            const pulls = res.data; // TODO: filter out closed PRs
            if(pulls.length === 0) {
              return null;
            } else if (pulls.length !== 1) {
              const msg = "Expecting one PR, got " + pulls.length;
              console.error(msg);
              throw new Error(msg);
            }

            const pull = pulls[0];
            return { pr: pull.number, head: pull.head.ref, base: pull.base.ref }

      - uses: actions/checkout@v3
      - name: "Output"
        id: files
        if: ${{fromJSON(steps.pr.outputs.result) != null}}
        env:
          pr: ${{fromJSON(steps.pr.outputs.result).pr}}
          base: ${{fromJSON(steps.pr.outputs.result).base}}
          head: ${{fromJSON(steps.pr.outputs.result).head}}
        run: |
          echo "Vdiff for ${{ env.pr }} (${{ env.base }} -> ${{ env.head }})"

          git fetch origin "screenshots/${{ env.head }}":"screenshots/${{ env.head }}"
          git fetch origin "screenshots/${{ env.base }}":"screenshots/${{ env.base }}"

          # actual checkout
          git checkout --orphan "vdiffs/${{ env.head }}"
          git reset --hard

          echo "FILES<<EOF" >> "$GITHUB_OUTPUT"

          for modified in $(git diff --name-only "screenshots/${{ env.base }}" "screenshots/${{ env.head }}" -- '*.png')
          do
            echo "updated screenshot: $modified"
            base_screenshot=$(mktemp)
            head_screenshot=$(mktemp)
            magick_out=$(mktemp)

            git show "screenshots/${{ env.base }}":"$modified" > "$base_screenshot"
            git show "screenshots/${{ env.head }}":"$modified" > "$head_screenshot"

            mkdir -p $(dirname "$modified")
            compare \
              -metric AE "$base_screenshot" "$head_screenshot" "$modified" \
              2> "$magick_out" || true

            metric=$(<"$magick_out")
            printf -v metric "%.f" "$metric"
            echo "Magick AE is: '$metric'"

            # Ensure that we got a meaningful output
            if ! [[ $metric =~ ^[0-9]+$ ]]
            then
              echo "Magick didn't return a number: $metric"
              exit 1
            fi

            if (( metric <= 100 ))
            then
              echo "Pixel difference ($metric) is too small, reverting"
              rm "$modified"
            else
              echo "Pixel difference ($metric) is large, listing"
              echo "$modified" >> "$GITHUB_OUTPUT"
            fi

            rm "$base_screenshot"
            rm "$head_screenshot"
            rm "$magick_out"
          done

          echo "EOF" >> "$GITHUB_OUTPUT"

          git add screenshots
          git config user.name "vdiffer"
          git config user.email "<>"
          git commit -am "Vdiffs for ${{ env.base }} -> ${{ env.head }}"
          git config --add --bool push.autoSetupRemote true
          git push --force

      - name: "Comment on PR"
        uses: actions/github-script@v5
          # TODO: if FILES != ''
        env:
          FILES: ${{ steps.files.outputs.FILES }}
          PR: ${{fromJSON(steps.pr.outputs.result).pr}}
          HEAD: ${{fromJSON(steps.pr.outputs.result).head}}
        with:
          script: |
            const files = process.env.FILES;

            let newSection = "<details>";
            newSection += "<summary>Some screenshots were modified</summary>";

            files.split("\n").forEach(file => {
              const imgUrl = `https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/vdiffs/${ process.env.HEAD }/${file}`;
              newSection += `<img src="${imgUrl}" width="250">`;
            });

            newSection += "</details>";

            const pr = await github.rest.issues.get({
              issue_number: process.env.PR,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const DELIM_START = "<!-- DIVIDER_start -->";
            const DELIM_STOP = "<!-- DIVIDER_stop -->";

            const body = pr.data.body;

            function ixOf(str) {
              const res = body.indexOf(str);
              return res === -1 ? undefined : res;
            }

            let delimStart = body.indexOf(DELIM_START);
            delimStart = delimStart !== -1 ? delimStart : body.length;
            let delimStop = body.indexOf(DELIM_STOP);
            delimStop = delimStop !== -1 ? delimStop + DELIM_STOP.length : body.length;
            const before = body.slice(0, delimStart);
            const after = body.slice(delimStop, body.length);

            const newBody = [before, DELIM_START, newSection, DELIM_STOP, after].join("");
            github.rest.issues.update({
              issue_number: process.env.PR,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: newBody,
            });
